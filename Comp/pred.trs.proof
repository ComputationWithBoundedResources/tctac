WORST_CASE(?,O(1))
* Step 1: DependencyPairs WORST_CASE(?,O(1))
    + Considered Problem:
        - Strict TRS:
            main(0()) -> 0()
            main(S(x4)) -> x4
        - Signature:
            {main/1} / {0/0,S/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {main} and constructors {0,S}
    + Applied Processor:
        DependencyPairs {dpKind_ = DT}
    + Details:
        We add the following dependency tuples:
        
        Strict DPs
          main#(0()) -> c_1()
          main#(S(x4)) -> c_2()
        Weak DPs
          
        
        and mark the set of starting terms.
* Step 2: PredecessorEstimation WORST_CASE(?,O(1))
    + Considered Problem:
        - Strict DPs:
            main#(0()) -> c_1()
            main#(S(x4)) -> c_2()
        - Weak TRS:
            main(0()) -> 0()
            main(S(x4)) -> x4
        - Signature:
            {main/1,main#/1} / {0/0,S/1,c_1/0,c_2/0}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {main#} and constructors {0,S}
    + Applied Processor:
        PredecessorEstimation {onSelection = all simple predecessor estimation selector}
    + Details:
        We estimate the number of application of
          {1,2}
        by application of
          Pre({1,2}) = {}.
        Here rules are labelled as follows:
          1: main#(0()) -> c_1()
          2: main#(S(x4)) -> c_2()
* Step 3: RemoveWeakSuffixes WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            main#(0()) -> c_1()
            main#(S(x4)) -> c_2()
        - Weak TRS:
            main(0()) -> 0()
            main(S(x4)) -> x4
        - Signature:
            {main/1,main#/1} / {0/0,S/1,c_1/0,c_2/0}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {main#} and constructors {0,S}
    + Applied Processor:
        RemoveWeakSuffixes
    + Details:
        Consider the dependency graph
          1:W:main#(0()) -> c_1()
             
          
          2:W:main#(S(x4)) -> c_2()
             
          
        The following weak DPs constitute a sub-graph of the DG that is closed under successors. The DPs are removed.
          2: main#(S(x4)) -> c_2()
          1: main#(0()) -> c_1()
* Step 4: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak TRS:
            main(0()) -> 0()
            main(S(x4)) -> x4
        - Signature:
            {main/1,main#/1} / {0/0,S/1,c_1/0,c_2/0}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {main#} and constructors {0,S}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

WORST_CASE(?,O(1))
