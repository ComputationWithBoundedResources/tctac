WORST_CASE(?,O(n^3))
* Step 1: DependencyPairs WORST_CASE(?,O(n^3))
    + Considered Problem:
        - Strict TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2} / {0/0,s/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add,mult} and constructors {0,s}
    + Applied Processor:
        DependencyPairs {dpKind_ = DT}
    + Details:
        We add the following dependency tuples:
        
        Strict DPs
          add#(0(),y) -> c_1()
          add#(s(x),y) -> c_2(add#(x,y))
          mult#(0(),y) -> c_3()
          mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        Weak DPs
          
        
        and mark the set of starting terms.
* Step 2: PredecessorEstimation WORST_CASE(?,O(n^3))
    + Considered Problem:
        - Strict DPs:
            add#(0(),y) -> c_1()
            add#(s(x),y) -> c_2(add#(x,y))
            mult#(0(),y) -> c_3()
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        PredecessorEstimation {onSelection = all simple predecessor estimation selector}
    + Details:
        We estimate the number of application of
          {1,3}
        by application of
          Pre({1,3}) = {2,4}.
        Here rules are labelled as follows:
          1: add#(0(),y) -> c_1()
          2: add#(s(x),y) -> c_2(add#(x,y))
          3: mult#(0(),y) -> c_3()
          4: mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
* Step 3: RemoveWeakSuffixes WORST_CASE(?,O(n^3))
    + Considered Problem:
        - Strict DPs:
            add#(s(x),y) -> c_2(add#(x,y))
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak DPs:
            add#(0(),y) -> c_1()
            mult#(0(),y) -> c_3()
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        RemoveWeakSuffixes
    + Details:
        Consider the dependency graph
          1:S:add#(s(x),y) -> c_2(add#(x,y))
             -->_1 add#(0(),y) -> c_1():3
             -->_1 add#(s(x),y) -> c_2(add#(x,y)):1
          
          2:S:mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
             -->_2 mult#(0(),y) -> c_3():4
             -->_1 add#(0(),y) -> c_1():3
             -->_2 mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y)):2
             -->_1 add#(s(x),y) -> c_2(add#(x,y)):1
          
          3:W:add#(0(),y) -> c_1()
             
          
          4:W:mult#(0(),y) -> c_3()
             
          
        The following weak DPs constitute a sub-graph of the DG that is closed under successors. The DPs are removed.
          4: mult#(0(),y) -> c_3()
          3: add#(0(),y) -> c_1()
* Step 4: Decompose WORST_CASE(?,O(n^3))
    + Considered Problem:
        - Strict DPs:
            add#(s(x),y) -> c_2(add#(x,y))
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        Decompose {onSelection = all cycle independent sub-graph, withBound = RelativeAdd}
    + Details:
        We analyse the complexity of following sub-problems (R) and (S).
        Problem (S) is obtained from the input problem by shifting strict rules from (R) into the weak component.
        
        Problem (R)
          - Strict DPs:
              add#(s(x),y) -> c_2(add#(x,y))
          - Weak DPs:
              mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
          - Weak TRS:
              add(0(),y) -> y
              add(s(x),y) -> s(add(x,y))
              mult(0(),y) -> 0()
              mult(s(x),y) -> add(mult(x,y),y)
          - Signature:
              {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
          - Obligation:
              innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
        
        Problem (S)
          - Strict DPs:
              mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
          - Weak DPs:
              add#(s(x),y) -> c_2(add#(x,y))
          - Weak TRS:
              add(0(),y) -> y
              add(s(x),y) -> s(add(x,y))
              mult(0(),y) -> 0()
              mult(s(x),y) -> add(mult(x,y),y)
          - Signature:
              {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
          - Obligation:
              innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
** Step 4.a:1: DecomposeDG WORST_CASE(?,O(n^3))
    + Considered Problem:
        - Strict DPs:
            add#(s(x),y) -> c_2(add#(x,y))
        - Weak DPs:
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        DecomposeDG {onSelection = all below first cut in WDG, onUpper = Just someStrategy, onLower = Nothing}
    + Details:
        We decompose the input problem according to the dependency graph into the upper component
          mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        and a lower component
          add#(s(x),y) -> c_2(add#(x,y))
        Further, following extension rules are added to the lower component.
          mult#(s(x),y) -> add#(mult(x,y),y)
          mult#(s(x),y) -> mult#(x,y)
*** Step 4.a:1.a:1: PredecessorEstimationCP WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        PredecessorEstimationCP {onSelectionCP = any intersect of rules of CDG leaf and strict-rules, withComplexityPair = NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Nothing}}
    + Details:
        We first use the processor NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Nothing} to orient following rules strictly:
          1: mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
          
        The strictly oriented rules are moved into the weak component.
**** Step 4.a:1.a:1.a:1: NaturalMI WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Just first alternative for predecessorEstimation on any intersect of rules of CDG leaf and strict-rules}
    + Details:
        We apply a matrix interpretation of kind constructor based matrix interpretation:
        The following argument positions are considered usable:
          uargs(c_4) = {1,2}
        
        Following symbols are considered usable:
          {add#,mult#}
        TcT has computed the following interpretation:
              p(0) = [4]                  
            p(add) = [1] x1 + [8] x2 + [4]
           p(mult) = [2]                  
              p(s) = [1] x1 + [2]         
           p(add#) = [0]                  
          p(mult#) = [8] x1 + [0]         
            p(c_1) = [1]                  
            p(c_2) = [1]                  
            p(c_3) = [1]                  
            p(c_4) = [2] x1 + [1] x2 + [5]
        
        Following rules are strictly oriented:
        mult#(s(x),y) = [8] x + [16]                     
                      > [8] x + [5]                      
                      = c_4(add#(mult(x,y),y),mult#(x,y))
        
        
        Following rules are (at-least) weakly oriented:
        
**** Step 4.a:1.a:1.a:2: Assumption WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        Assumption {assumed = Certificate {spaceUB = Unknown, spaceLB = Unknown, timeUB = Poly (Just 0), timeLB = Unknown}}
    + Details:
        ()

**** Step 4.a:1.a:1.b:1: RemoveWeakSuffixes WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        RemoveWeakSuffixes
    + Details:
        Consider the dependency graph
          1:W:mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
             -->_2 mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y)):1
          
        The following weak DPs constitute a sub-graph of the DG that is closed under successors. The DPs are removed.
          1: mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
**** Step 4.a:1.a:1.b:2: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

*** Step 4.a:1.b:1: PredecessorEstimationCP WORST_CASE(?,O(n^2))
    + Considered Problem:
        - Strict DPs:
            add#(s(x),y) -> c_2(add#(x,y))
        - Weak DPs:
            mult#(s(x),y) -> add#(mult(x,y),y)
            mult#(s(x),y) -> mult#(x,y)
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        PredecessorEstimationCP {onSelectionCP = any intersect of rules of CDG leaf and strict-rules, withComplexityPair = NaturalPI {shape = Mixed 2, restrict = Restrict, uargs = UArgs, urules = URules, selector = Nothing}}
    + Details:
        We first use the processor NaturalPI {shape = Mixed 2, restrict = Restrict, uargs = UArgs, urules = URules, selector = Nothing} to orient following rules strictly:
          1: add#(s(x),y) -> c_2(add#(x,y))
          
        The strictly oriented rules are moved into the weak component.
**** Step 4.a:1.b:1.a:1: NaturalPI WORST_CASE(?,O(n^2))
    + Considered Problem:
        - Strict DPs:
            add#(s(x),y) -> c_2(add#(x,y))
        - Weak DPs:
            mult#(s(x),y) -> add#(mult(x,y),y)
            mult#(s(x),y) -> mult#(x,y)
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        NaturalPI {shape = Mixed 2, restrict = Restrict, uargs = UArgs, urules = URules, selector = Just first alternative for predecessorEstimation on any intersect of rules of CDG leaf and strict-rules}
    + Details:
        We apply a polynomial interpretation of kind constructor-based(mixed(2)):
        The following argument positions are considered usable:
          uargs(c_2) = {1}
        
        Following symbols are considered usable:
          {add,mult,add#,mult#}
        TcT has computed the following interpretation:
              p(0) = 2                               
            p(add) = x1 + 2*x2                       
           p(mult) = 2 + x1 + 2*x1*x2                
              p(s) = 2 + x1                          
           p(add#) = 4 + 2*x1 + 3*x2 + 4*x2^2        
          p(mult#) = 5*x1*x2 + 2*x1^2 + 2*x2 + 7*x2^2
            p(c_1) = 1                               
            p(c_2) = x1                              
            p(c_3) = 0                               
            p(c_4) = 1 + x2                          
        
        Following rules are strictly oriented:
        add#(s(x),y) = 8 + 2*x + 3*y + 4*y^2
                     > 4 + 2*x + 3*y + 4*y^2
                     = c_2(add#(x,y))       
        
        
        Following rules are (at-least) weakly oriented:
        mult#(s(x),y) =  8 + 8*x + 5*x*y + 2*x^2 + 12*y + 7*y^2
                      >= 8 + 2*x + 4*x*y + 3*y + 4*y^2         
                      =  add#(mult(x,y),y)                     
        
        mult#(s(x),y) =  8 + 8*x + 5*x*y + 2*x^2 + 12*y + 7*y^2
                      >= 5*x*y + 2*x^2 + 2*y + 7*y^2           
                      =  mult#(x,y)                            
        
           add(0(),y) =  2 + 2*y                               
                      >= y                                     
                      =  y                                     
        
          add(s(x),y) =  2 + x + 2*y                           
                      >= 2 + x + 2*y                           
                      =  s(add(x,y))                           
        
          mult(0(),y) =  4 + 4*y                               
                      >= 2                                     
                      =  0()                                   
        
         mult(s(x),y) =  4 + x + 2*x*y + 4*y                   
                      >= 2 + x + 2*x*y + 2*y                   
                      =  add(mult(x,y),y)                      
        
**** Step 4.a:1.b:1.a:2: Assumption WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            add#(s(x),y) -> c_2(add#(x,y))
            mult#(s(x),y) -> add#(mult(x,y),y)
            mult#(s(x),y) -> mult#(x,y)
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        Assumption {assumed = Certificate {spaceUB = Unknown, spaceLB = Unknown, timeUB = Poly (Just 0), timeLB = Unknown}}
    + Details:
        ()

**** Step 4.a:1.b:1.b:1: RemoveWeakSuffixes WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            add#(s(x),y) -> c_2(add#(x,y))
            mult#(s(x),y) -> add#(mult(x,y),y)
            mult#(s(x),y) -> mult#(x,y)
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        RemoveWeakSuffixes
    + Details:
        Consider the dependency graph
          1:W:add#(s(x),y) -> c_2(add#(x,y))
             -->_1 add#(s(x),y) -> c_2(add#(x,y)):1
          
          2:W:mult#(s(x),y) -> add#(mult(x,y),y)
             -->_1 add#(s(x),y) -> c_2(add#(x,y)):1
          
          3:W:mult#(s(x),y) -> mult#(x,y)
             -->_1 mult#(s(x),y) -> mult#(x,y):3
             -->_1 mult#(s(x),y) -> add#(mult(x,y),y):2
          
        The following weak DPs constitute a sub-graph of the DG that is closed under successors. The DPs are removed.
          3: mult#(s(x),y) -> mult#(x,y)
          2: mult#(s(x),y) -> add#(mult(x,y),y)
          1: add#(s(x),y) -> c_2(add#(x,y))
**** Step 4.a:1.b:1.b:2: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

** Step 4.b:1: RemoveWeakSuffixes WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak DPs:
            add#(s(x),y) -> c_2(add#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        RemoveWeakSuffixes
    + Details:
        Consider the dependency graph
          1:S:mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
             -->_1 add#(s(x),y) -> c_2(add#(x,y)):2
             -->_2 mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y)):1
          
          2:W:add#(s(x),y) -> c_2(add#(x,y))
             -->_1 add#(s(x),y) -> c_2(add#(x,y)):2
          
        The following weak DPs constitute a sub-graph of the DG that is closed under successors. The DPs are removed.
          2: add#(s(x),y) -> c_2(add#(x,y))
** Step 4.b:2: SimplifyRHS WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/2}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        SimplifyRHS
    + Details:
        Consider the dependency graph
          1:S:mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y))
             -->_2 mult#(s(x),y) -> c_4(add#(mult(x,y),y),mult#(x,y)):1
          
        Due to missing edges in the depndency graph, the right-hand sides of following rules could be simplified:
          mult#(s(x),y) -> c_4(mult#(x,y))
** Step 4.b:3: UsableRules WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            mult#(s(x),y) -> c_4(mult#(x,y))
        - Weak TRS:
            add(0(),y) -> y
            add(s(x),y) -> s(add(x,y))
            mult(0(),y) -> 0()
            mult(s(x),y) -> add(mult(x,y),y)
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        UsableRules
    + Details:
        We replace rewrite rules by usable rules:
          mult#(s(x),y) -> c_4(mult#(x,y))
** Step 4.b:4: PredecessorEstimationCP WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            mult#(s(x),y) -> c_4(mult#(x,y))
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        PredecessorEstimationCP {onSelectionCP = any intersect of rules of CDG leaf and strict-rules, withComplexityPair = NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Nothing}}
    + Details:
        We first use the processor NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Nothing} to orient following rules strictly:
          1: mult#(s(x),y) -> c_4(mult#(x,y))
          
        The strictly oriented rules are moved into the weak component.
*** Step 4.b:4.a:1: NaturalMI WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            mult#(s(x),y) -> c_4(mult#(x,y))
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Just first alternative for predecessorEstimation on any intersect of rules of CDG leaf and strict-rules}
    + Details:
        We apply a matrix interpretation of kind constructor based matrix interpretation:
        The following argument positions are considered usable:
          uargs(c_4) = {1}
        
        Following symbols are considered usable:
          {add#,mult#}
        TcT has computed the following interpretation:
              p(0) = [2]         
            p(add) = [2] x2 + [2]
           p(mult) = [1] x1 + [4]
              p(s) = [1] x1 + [7]
           p(add#) = [8] x2 + [1]
          p(mult#) = [1] x1 + [0]
            p(c_1) = [0]         
            p(c_2) = [0]         
            p(c_3) = [0]         
            p(c_4) = [1] x1 + [6]
        
        Following rules are strictly oriented:
        mult#(s(x),y) = [1] x + [7]    
                      > [1] x + [6]    
                      = c_4(mult#(x,y))
        
        
        Following rules are (at-least) weakly oriented:
        
*** Step 4.b:4.a:2: Assumption WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            mult#(s(x),y) -> c_4(mult#(x,y))
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        Assumption {assumed = Certificate {spaceUB = Unknown, spaceLB = Unknown, timeUB = Poly (Just 0), timeLB = Unknown}}
    + Details:
        ()

*** Step 4.b:4.b:1: RemoveWeakSuffixes WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            mult#(s(x),y) -> c_4(mult#(x,y))
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        RemoveWeakSuffixes
    + Details:
        Consider the dependency graph
          1:W:mult#(s(x),y) -> c_4(mult#(x,y))
             -->_1 mult#(s(x),y) -> c_4(mult#(x,y)):1
          
        The following weak DPs constitute a sub-graph of the DG that is closed under successors. The DPs are removed.
          1: mult#(s(x),y) -> c_4(mult#(x,y))
*** Step 4.b:4.b:2: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        
        - Signature:
            {add/2,mult/2,add#/2,mult#/2} / {0/0,s/1,c_1/0,c_2/1,c_3/0,c_4/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {add#,mult#} and constructors {0,s}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

WORST_CASE(?,O(n^3))
