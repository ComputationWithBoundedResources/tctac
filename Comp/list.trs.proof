WORST_CASE(?,O(n^1))
* Step 1: Bounds WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict TRS:
            goal(x) -> list(x)
            list(Cons(x,xs)) -> list(xs)
            list(Nil()) -> True()
            list(Nil()) -> isEmpty[Match](Nil())
            notEmpty(Cons(x,xs)) -> True()
            notEmpty(Nil()) -> False()
        - Signature:
            {goal/1,list/1,notEmpty/1} / {Cons/2,False/0,Nil/0,True/0,isEmpty[Match]/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {goal,list,notEmpty} and constructors {Cons,False,Nil,True
            ,isEmpty[Match]}
    + Applied Processor:
        Bounds {initialAutomaton = minimal, enrichment = match}
    + Details:
        The problem is match-bounded by 1.
        The enriched problem is compatible with follwoing automaton.
          Cons_0(2,2) -> 2
          False_0() -> 2
          False_1() -> 1
          Nil_0() -> 2
          Nil_1() -> 3
          True_0() -> 2
          True_1() -> 1
          goal_0(2) -> 1
          isEmpty[Match]_0(2) -> 2
          isEmpty[Match]_1(3) -> 1
          list_0(2) -> 1
          list_1(2) -> 1
          notEmpty_0(2) -> 1
* Step 2: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak TRS:
            goal(x) -> list(x)
            list(Cons(x,xs)) -> list(xs)
            list(Nil()) -> True()
            list(Nil()) -> isEmpty[Match](Nil())
            notEmpty(Cons(x,xs)) -> True()
            notEmpty(Nil()) -> False()
        - Signature:
            {goal/1,list/1,notEmpty/1} / {Cons/2,False/0,Nil/0,True/0,isEmpty[Match]/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {goal,list,notEmpty} and constructors {Cons,False,Nil,True
            ,isEmpty[Match]}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

WORST_CASE(?,O(n^1))
