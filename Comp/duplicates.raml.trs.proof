WORST_CASE(?,O(n^4))
* Step 1: DependencyPairs WORST_CASE(?,O(n^4))
    + Considered Problem:
        - Strict TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            nub(l) -> nub#1(l)
            nub#1(dd(x,xs)) -> dd(x,nub(remove(x,xs)))
            nub#1(nil()) -> nil()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4} / {#0/0
            ,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and,#eq,#equal,and,eq,eq#1,eq#2,eq#3,nub,nub#1,remove
            ,remove#1,remove#2} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        DependencyPairs {dpKind_ = DT}
    + Details:
        We add the following dependency tuples:
        
        Strict DPs
          #and#(#false(),#false()) -> c_1()
          #and#(#false(),#true()) -> c_2()
          #and#(#true(),#false()) -> c_3()
          #and#(#true(),#true()) -> c_4()
          #eq#(#0(),#0()) -> c_5()
          #eq#(#0(),#neg(y)) -> c_6()
          #eq#(#0(),#pos(y)) -> c_7()
          #eq#(#0(),#s(y)) -> c_8()
          #eq#(#neg(x),#0()) -> c_9()
          #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
          #eq#(#neg(x),#pos(y)) -> c_11()
          #eq#(#pos(x),#0()) -> c_12()
          #eq#(#pos(x),#neg(y)) -> c_13()
          #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
          #eq#(#s(x),#0()) -> c_15()
          #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
          #eq#(dd(x'1,x'2),nil()) -> c_18()
          #eq#(nil(),dd(y'1,y'2)) -> c_19()
          #eq#(nil(),nil()) -> c_20()
          #equal#(x,y) -> c_21(#eq#(x,y))
          and#(x,y) -> c_22(#and#(x,y))
          eq#(l1,l2) -> c_23(eq#1#(l1,l2))
          eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
          eq#1#(nil(),l2) -> c_25(eq#2#(l2))
          eq#2#(dd(y,ys)) -> c_26()
          eq#2#(nil()) -> c_27()
          eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
          eq#3#(nil(),x,xs) -> c_29()
          nub#(l) -> c_30(nub#1#(l))
          nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
          nub#1#(nil()) -> c_32()
          remove#(x,l) -> c_33(remove#1#(l,x))
          remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
          remove#1#(nil(),x) -> c_35()
          remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
          remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        Weak DPs
          
        
        and mark the set of starting terms.
* Step 2: PredecessorEstimation WORST_CASE(?,O(n^4))
    + Considered Problem:
        - Strict DPs:
            #and#(#false(),#false()) -> c_1()
            #and#(#false(),#true()) -> c_2()
            #and#(#true(),#false()) -> c_3()
            #and#(#true(),#true()) -> c_4()
            #eq#(#0(),#0()) -> c_5()
            #eq#(#0(),#neg(y)) -> c_6()
            #eq#(#0(),#pos(y)) -> c_7()
            #eq#(#0(),#s(y)) -> c_8()
            #eq#(#neg(x),#0()) -> c_9()
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#neg(x),#pos(y)) -> c_11()
            #eq#(#pos(x),#0()) -> c_12()
            #eq#(#pos(x),#neg(y)) -> c_13()
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#0()) -> c_15()
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
            #eq#(dd(x'1,x'2),nil()) -> c_18()
            #eq#(nil(),dd(y'1,y'2)) -> c_19()
            #eq#(nil(),nil()) -> c_20()
            #equal#(x,y) -> c_21(#eq#(x,y))
            and#(x,y) -> c_22(#and#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#1#(nil(),l2) -> c_25(eq#2#(l2))
            eq#2#(dd(y,ys)) -> c_26()
            eq#2#(nil()) -> c_27()
            eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
            eq#3#(nil(),x,xs) -> c_29()
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
            nub#1#(nil()) -> c_32()
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#1#(nil(),x) -> c_35()
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            nub(l) -> nub#1(l)
            nub#1(dd(x,xs)) -> dd(x,nub(remove(x,xs)))
            nub#1(nil()) -> nil()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/3,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/3,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        PredecessorEstimation {onSelection = all simple predecessor estimation selector}
    + Details:
        We estimate the number of application of
          {1,2,3,4,5,6,7,8,9,11,12,13,15,18,19,20,26,27,29,32,35}
        by application of
          Pre({1,2,3,4,5,6,7,8,9,11,12,13,15,18,19,20,26,27,29,32,35}) = {10,14,16,17,21,22,24,25,30,33}.
        Here rules are labelled as follows:
          1: #and#(#false(),#false()) -> c_1()
          2: #and#(#false(),#true()) -> c_2()
          3: #and#(#true(),#false()) -> c_3()
          4: #and#(#true(),#true()) -> c_4()
          5: #eq#(#0(),#0()) -> c_5()
          6: #eq#(#0(),#neg(y)) -> c_6()
          7: #eq#(#0(),#pos(y)) -> c_7()
          8: #eq#(#0(),#s(y)) -> c_8()
          9: #eq#(#neg(x),#0()) -> c_9()
          10: #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
          11: #eq#(#neg(x),#pos(y)) -> c_11()
          12: #eq#(#pos(x),#0()) -> c_12()
          13: #eq#(#pos(x),#neg(y)) -> c_13()
          14: #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
          15: #eq#(#s(x),#0()) -> c_15()
          16: #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
          17: #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
          18: #eq#(dd(x'1,x'2),nil()) -> c_18()
          19: #eq#(nil(),dd(y'1,y'2)) -> c_19()
          20: #eq#(nil(),nil()) -> c_20()
          21: #equal#(x,y) -> c_21(#eq#(x,y))
          22: and#(x,y) -> c_22(#and#(x,y))
          23: eq#(l1,l2) -> c_23(eq#1#(l1,l2))
          24: eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
          25: eq#1#(nil(),l2) -> c_25(eq#2#(l2))
          26: eq#2#(dd(y,ys)) -> c_26()
          27: eq#2#(nil()) -> c_27()
          28: eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
          29: eq#3#(nil(),x,xs) -> c_29()
          30: nub#(l) -> c_30(nub#1#(l))
          31: nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
          32: nub#1#(nil()) -> c_32()
          33: remove#(x,l) -> c_33(remove#1#(l,x))
          34: remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
          35: remove#1#(nil(),x) -> c_35()
          36: remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
          37: remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
* Step 3: PredecessorEstimation WORST_CASE(?,O(n^4))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            and#(x,y) -> c_22(#and#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#1#(nil(),l2) -> c_25(eq#2#(l2))
            eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak DPs:
            #and#(#false(),#false()) -> c_1()
            #and#(#false(),#true()) -> c_2()
            #and#(#true(),#false()) -> c_3()
            #and#(#true(),#true()) -> c_4()
            #eq#(#0(),#0()) -> c_5()
            #eq#(#0(),#neg(y)) -> c_6()
            #eq#(#0(),#pos(y)) -> c_7()
            #eq#(#0(),#s(y)) -> c_8()
            #eq#(#neg(x),#0()) -> c_9()
            #eq#(#neg(x),#pos(y)) -> c_11()
            #eq#(#pos(x),#0()) -> c_12()
            #eq#(#pos(x),#neg(y)) -> c_13()
            #eq#(#s(x),#0()) -> c_15()
            #eq#(dd(x'1,x'2),nil()) -> c_18()
            #eq#(nil(),dd(y'1,y'2)) -> c_19()
            #eq#(nil(),nil()) -> c_20()
            eq#2#(dd(y,ys)) -> c_26()
            eq#2#(nil()) -> c_27()
            eq#3#(nil(),x,xs) -> c_29()
            nub#1#(nil()) -> c_32()
            remove#1#(nil(),x) -> c_35()
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            nub(l) -> nub#1(l)
            nub#1(dd(x,xs)) -> dd(x,nub(remove(x,xs)))
            nub#1(nil()) -> nil()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/3,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/3,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        PredecessorEstimation {onSelection = all simple predecessor estimation selector}
    + Details:
        We estimate the number of application of
          {6,9}
        by application of
          Pre({6,9}) = {7,10}.
        Here rules are labelled as follows:
          1: #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
          2: #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
          3: #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
          4: #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
          5: #equal#(x,y) -> c_21(#eq#(x,y))
          6: and#(x,y) -> c_22(#and#(x,y))
          7: eq#(l1,l2) -> c_23(eq#1#(l1,l2))
          8: eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
          9: eq#1#(nil(),l2) -> c_25(eq#2#(l2))
          10: eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
          11: nub#(l) -> c_30(nub#1#(l))
          12: nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
          13: remove#(x,l) -> c_33(remove#1#(l,x))
          14: remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
          15: remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
          16: remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
          17: #and#(#false(),#false()) -> c_1()
          18: #and#(#false(),#true()) -> c_2()
          19: #and#(#true(),#false()) -> c_3()
          20: #and#(#true(),#true()) -> c_4()
          21: #eq#(#0(),#0()) -> c_5()
          22: #eq#(#0(),#neg(y)) -> c_6()
          23: #eq#(#0(),#pos(y)) -> c_7()
          24: #eq#(#0(),#s(y)) -> c_8()
          25: #eq#(#neg(x),#0()) -> c_9()
          26: #eq#(#neg(x),#pos(y)) -> c_11()
          27: #eq#(#pos(x),#0()) -> c_12()
          28: #eq#(#pos(x),#neg(y)) -> c_13()
          29: #eq#(#s(x),#0()) -> c_15()
          30: #eq#(dd(x'1,x'2),nil()) -> c_18()
          31: #eq#(nil(),dd(y'1,y'2)) -> c_19()
          32: #eq#(nil(),nil()) -> c_20()
          33: eq#2#(dd(y,ys)) -> c_26()
          34: eq#2#(nil()) -> c_27()
          35: eq#3#(nil(),x,xs) -> c_29()
          36: nub#1#(nil()) -> c_32()
          37: remove#1#(nil(),x) -> c_35()
* Step 4: RemoveWeakSuffixes WORST_CASE(?,O(n^4))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak DPs:
            #and#(#false(),#false()) -> c_1()
            #and#(#false(),#true()) -> c_2()
            #and#(#true(),#false()) -> c_3()
            #and#(#true(),#true()) -> c_4()
            #eq#(#0(),#0()) -> c_5()
            #eq#(#0(),#neg(y)) -> c_6()
            #eq#(#0(),#pos(y)) -> c_7()
            #eq#(#0(),#s(y)) -> c_8()
            #eq#(#neg(x),#0()) -> c_9()
            #eq#(#neg(x),#pos(y)) -> c_11()
            #eq#(#pos(x),#0()) -> c_12()
            #eq#(#pos(x),#neg(y)) -> c_13()
            #eq#(#s(x),#0()) -> c_15()
            #eq#(dd(x'1,x'2),nil()) -> c_18()
            #eq#(nil(),dd(y'1,y'2)) -> c_19()
            #eq#(nil(),nil()) -> c_20()
            and#(x,y) -> c_22(#and#(x,y))
            eq#1#(nil(),l2) -> c_25(eq#2#(l2))
            eq#2#(dd(y,ys)) -> c_26()
            eq#2#(nil()) -> c_27()
            eq#3#(nil(),x,xs) -> c_29()
            nub#1#(nil()) -> c_32()
            remove#1#(nil(),x) -> c_35()
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            nub(l) -> nub#1(l)
            nub#1(dd(x,xs)) -> dd(x,nub(remove(x,xs)))
            nub#1(nil()) -> nil()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/3,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/3,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        RemoveWeakSuffixes
    + Details:
        Consider the dependency graph
          1:S:#eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(nil(),nil()) -> c_20():30
             -->_1 #eq#(nil(),dd(y'1,y'2)) -> c_19():29
             -->_1 #eq#(dd(x'1,x'2),nil()) -> c_18():28
             -->_1 #eq#(#s(x),#0()) -> c_15():27
             -->_1 #eq#(#pos(x),#neg(y)) -> c_13():26
             -->_1 #eq#(#pos(x),#0()) -> c_12():25
             -->_1 #eq#(#neg(x),#pos(y)) -> c_11():24
             -->_1 #eq#(#neg(x),#0()) -> c_9():23
             -->_1 #eq#(#0(),#s(y)) -> c_8():22
             -->_1 #eq#(#0(),#pos(y)) -> c_7():21
             -->_1 #eq#(#0(),#neg(y)) -> c_6():20
             -->_1 #eq#(#0(),#0()) -> c_5():19
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          2:S:#eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(nil(),nil()) -> c_20():30
             -->_1 #eq#(nil(),dd(y'1,y'2)) -> c_19():29
             -->_1 #eq#(dd(x'1,x'2),nil()) -> c_18():28
             -->_1 #eq#(#s(x),#0()) -> c_15():27
             -->_1 #eq#(#pos(x),#neg(y)) -> c_13():26
             -->_1 #eq#(#pos(x),#0()) -> c_12():25
             -->_1 #eq#(#neg(x),#pos(y)) -> c_11():24
             -->_1 #eq#(#neg(x),#0()) -> c_9():23
             -->_1 #eq#(#0(),#s(y)) -> c_8():22
             -->_1 #eq#(#0(),#pos(y)) -> c_7():21
             -->_1 #eq#(#0(),#neg(y)) -> c_6():20
             -->_1 #eq#(#0(),#0()) -> c_5():19
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          3:S:#eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_1 #eq#(nil(),nil()) -> c_20():30
             -->_1 #eq#(nil(),dd(y'1,y'2)) -> c_19():29
             -->_1 #eq#(dd(x'1,x'2),nil()) -> c_18():28
             -->_1 #eq#(#s(x),#0()) -> c_15():27
             -->_1 #eq#(#pos(x),#neg(y)) -> c_13():26
             -->_1 #eq#(#pos(x),#0()) -> c_12():25
             -->_1 #eq#(#neg(x),#pos(y)) -> c_11():24
             -->_1 #eq#(#neg(x),#0()) -> c_9():23
             -->_1 #eq#(#0(),#s(y)) -> c_8():22
             -->_1 #eq#(#0(),#pos(y)) -> c_7():21
             -->_1 #eq#(#0(),#neg(y)) -> c_6():20
             -->_1 #eq#(#0(),#0()) -> c_5():19
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          4:S:#eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
             -->_3 #eq#(nil(),nil()) -> c_20():30
             -->_2 #eq#(nil(),nil()) -> c_20():30
             -->_3 #eq#(nil(),dd(y'1,y'2)) -> c_19():29
             -->_2 #eq#(nil(),dd(y'1,y'2)) -> c_19():29
             -->_3 #eq#(dd(x'1,x'2),nil()) -> c_18():28
             -->_2 #eq#(dd(x'1,x'2),nil()) -> c_18():28
             -->_3 #eq#(#s(x),#0()) -> c_15():27
             -->_2 #eq#(#s(x),#0()) -> c_15():27
             -->_3 #eq#(#pos(x),#neg(y)) -> c_13():26
             -->_2 #eq#(#pos(x),#neg(y)) -> c_13():26
             -->_3 #eq#(#pos(x),#0()) -> c_12():25
             -->_2 #eq#(#pos(x),#0()) -> c_12():25
             -->_3 #eq#(#neg(x),#pos(y)) -> c_11():24
             -->_2 #eq#(#neg(x),#pos(y)) -> c_11():24
             -->_3 #eq#(#neg(x),#0()) -> c_9():23
             -->_2 #eq#(#neg(x),#0()) -> c_9():23
             -->_3 #eq#(#0(),#s(y)) -> c_8():22
             -->_2 #eq#(#0(),#s(y)) -> c_8():22
             -->_3 #eq#(#0(),#pos(y)) -> c_7():21
             -->_2 #eq#(#0(),#pos(y)) -> c_7():21
             -->_3 #eq#(#0(),#neg(y)) -> c_6():20
             -->_2 #eq#(#0(),#neg(y)) -> c_6():20
             -->_3 #eq#(#0(),#0()) -> c_5():19
             -->_2 #eq#(#0(),#0()) -> c_5():19
             -->_1 #and#(#true(),#true()) -> c_4():18
             -->_1 #and#(#true(),#false()) -> c_3():17
             -->_1 #and#(#false(),#true()) -> c_2():16
             -->_1 #and#(#false(),#false()) -> c_1():15
             -->_3 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2)):4
             -->_2 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2)):4
             -->_3 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_2 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_3 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_2 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_3 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
             -->_2 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          5:S:#equal#(x,y) -> c_21(#eq#(x,y))
             -->_1 #eq#(nil(),nil()) -> c_20():30
             -->_1 #eq#(nil(),dd(y'1,y'2)) -> c_19():29
             -->_1 #eq#(dd(x'1,x'2),nil()) -> c_18():28
             -->_1 #eq#(#s(x),#0()) -> c_15():27
             -->_1 #eq#(#pos(x),#neg(y)) -> c_13():26
             -->_1 #eq#(#pos(x),#0()) -> c_12():25
             -->_1 #eq#(#neg(x),#pos(y)) -> c_11():24
             -->_1 #eq#(#neg(x),#0()) -> c_9():23
             -->_1 #eq#(#0(),#s(y)) -> c_8():22
             -->_1 #eq#(#0(),#pos(y)) -> c_7():21
             -->_1 #eq#(#0(),#neg(y)) -> c_6():20
             -->_1 #eq#(#0(),#0()) -> c_5():19
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2)):4
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          6:S:eq#(l1,l2) -> c_23(eq#1#(l1,l2))
             -->_1 eq#1#(nil(),l2) -> c_25(eq#2#(l2)):32
             -->_1 eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs)):7
          
          7:S:eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
             -->_1 eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys)):8
             -->_1 eq#3#(nil(),x,xs) -> c_29():35
          
          8:S:eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
             -->_1 and#(x,y) -> c_22(#and#(x,y)):31
             -->_3 eq#(l1,l2) -> c_23(eq#1#(l1,l2)):6
             -->_2 #equal#(x,y) -> c_21(#eq#(x,y)):5
          
          9:S:nub#(l) -> c_30(nub#1#(l))
             -->_1 nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs)):10
             -->_1 nub#1#(nil()) -> c_32():36
          
          10:S:nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
             -->_2 remove#(x,l) -> c_33(remove#1#(l,x)):11
             -->_1 nub#(l) -> c_30(nub#1#(l)):9
          
          11:S:remove#(x,l) -> c_33(remove#1#(l,x))
             -->_1 remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y)):12
             -->_1 remove#1#(nil(),x) -> c_35():37
          
          12:S:remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
             -->_1 remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys)):14
             -->_1 remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys)):13
             -->_2 eq#(l1,l2) -> c_23(eq#1#(l1,l2)):6
          
          13:S:remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
             -->_1 remove#(x,l) -> c_33(remove#1#(l,x)):11
          
          14:S:remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
             -->_1 remove#(x,l) -> c_33(remove#1#(l,x)):11
          
          15:W:#and#(#false(),#false()) -> c_1()
             
          
          16:W:#and#(#false(),#true()) -> c_2()
             
          
          17:W:#and#(#true(),#false()) -> c_3()
             
          
          18:W:#and#(#true(),#true()) -> c_4()
             
          
          19:W:#eq#(#0(),#0()) -> c_5()
             
          
          20:W:#eq#(#0(),#neg(y)) -> c_6()
             
          
          21:W:#eq#(#0(),#pos(y)) -> c_7()
             
          
          22:W:#eq#(#0(),#s(y)) -> c_8()
             
          
          23:W:#eq#(#neg(x),#0()) -> c_9()
             
          
          24:W:#eq#(#neg(x),#pos(y)) -> c_11()
             
          
          25:W:#eq#(#pos(x),#0()) -> c_12()
             
          
          26:W:#eq#(#pos(x),#neg(y)) -> c_13()
             
          
          27:W:#eq#(#s(x),#0()) -> c_15()
             
          
          28:W:#eq#(dd(x'1,x'2),nil()) -> c_18()
             
          
          29:W:#eq#(nil(),dd(y'1,y'2)) -> c_19()
             
          
          30:W:#eq#(nil(),nil()) -> c_20()
             
          
          31:W:and#(x,y) -> c_22(#and#(x,y))
             -->_1 #and#(#true(),#true()) -> c_4():18
             -->_1 #and#(#true(),#false()) -> c_3():17
             -->_1 #and#(#false(),#true()) -> c_2():16
             -->_1 #and#(#false(),#false()) -> c_1():15
          
          32:W:eq#1#(nil(),l2) -> c_25(eq#2#(l2))
             -->_1 eq#2#(nil()) -> c_27():34
             -->_1 eq#2#(dd(y,ys)) -> c_26():33
          
          33:W:eq#2#(dd(y,ys)) -> c_26()
             
          
          34:W:eq#2#(nil()) -> c_27()
             
          
          35:W:eq#3#(nil(),x,xs) -> c_29()
             
          
          36:W:nub#1#(nil()) -> c_32()
             
          
          37:W:remove#1#(nil(),x) -> c_35()
             
          
        The following weak DPs constitute a sub-graph of the DG that is closed under successors. The DPs are removed.
          36: nub#1#(nil()) -> c_32()
          37: remove#1#(nil(),x) -> c_35()
          35: eq#3#(nil(),x,xs) -> c_29()
          31: and#(x,y) -> c_22(#and#(x,y))
          32: eq#1#(nil(),l2) -> c_25(eq#2#(l2))
          33: eq#2#(dd(y,ys)) -> c_26()
          34: eq#2#(nil()) -> c_27()
          15: #and#(#false(),#false()) -> c_1()
          16: #and#(#false(),#true()) -> c_2()
          17: #and#(#true(),#false()) -> c_3()
          18: #and#(#true(),#true()) -> c_4()
          19: #eq#(#0(),#0()) -> c_5()
          20: #eq#(#0(),#neg(y)) -> c_6()
          21: #eq#(#0(),#pos(y)) -> c_7()
          22: #eq#(#0(),#s(y)) -> c_8()
          23: #eq#(#neg(x),#0()) -> c_9()
          24: #eq#(#neg(x),#pos(y)) -> c_11()
          25: #eq#(#pos(x),#0()) -> c_12()
          26: #eq#(#pos(x),#neg(y)) -> c_13()
          27: #eq#(#s(x),#0()) -> c_15()
          28: #eq#(dd(x'1,x'2),nil()) -> c_18()
          29: #eq#(nil(),dd(y'1,y'2)) -> c_19()
          30: #eq#(nil(),nil()) -> c_20()
* Step 5: SimplifyRHS WORST_CASE(?,O(n^4))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            nub(l) -> nub#1(l)
            nub#1(dd(x,xs)) -> dd(x,nub(remove(x,xs)))
            nub#1(nil()) -> nil()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/3,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/3,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        SimplifyRHS
    + Details:
        Consider the dependency graph
          1:S:#eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          2:S:#eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          3:S:#eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          4:S:#eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2))
             -->_3 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_2 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2)),#eq#(x'1,y'1),#eq#(x'2,y'2)):4
             -->_3 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_2 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_3 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_2 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_3 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
             -->_2 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          5:S:#equal#(x,y) -> c_21(#eq#(x,y))
             -->_1 #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#and#(#eq(x'1,y'1),#eq(x'2,y'2))
                                                        ,#eq#(x'1,y'1)
                                                        ,#eq#(x'2,y'2)):4
             -->_1 #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y)):3
             -->_1 #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y)):2
             -->_1 #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y)):1
          
          6:S:eq#(l1,l2) -> c_23(eq#1#(l1,l2))
             -->_1 eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs)):7
          
          7:S:eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
             -->_1 eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys)):8
          
          8:S:eq#3#(dd(y,ys),x,xs) -> c_28(and#(#equal(x,y),eq(xs,ys)),#equal#(x,y),eq#(xs,ys))
             -->_3 eq#(l1,l2) -> c_23(eq#1#(l1,l2)):6
             -->_2 #equal#(x,y) -> c_21(#eq#(x,y)):5
          
          9:S:nub#(l) -> c_30(nub#1#(l))
             -->_1 nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs)):10
          
          10:S:nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
             -->_2 remove#(x,l) -> c_33(remove#1#(l,x)):11
             -->_1 nub#(l) -> c_30(nub#1#(l)):9
          
          11:S:remove#(x,l) -> c_33(remove#1#(l,x))
             -->_1 remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y)):12
          
          12:S:remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
             -->_1 remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys)):14
             -->_1 remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys)):13
             -->_2 eq#(l1,l2) -> c_23(eq#1#(l1,l2)):6
          
          13:S:remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
             -->_1 remove#(x,l) -> c_33(remove#1#(l,x)):11
          
          14:S:remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
             -->_1 remove#(x,l) -> c_33(remove#1#(l,x)):11
          
        Due to missing edges in the depndency graph, the right-hand sides of following rules could be simplified:
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
* Step 6: UsableRules WORST_CASE(?,O(n^4))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            nub(l) -> nub#1(l)
            nub#1(dd(x,xs)) -> dd(x,nub(remove(x,xs)))
            nub#1(nil()) -> nil()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        UsableRules
    + Details:
        We replace rewrite rules by usable rules:
          #and(#false(),#false()) -> #false()
          #and(#false(),#true()) -> #false()
          #and(#true(),#false()) -> #false()
          #and(#true(),#true()) -> #true()
          #eq(#0(),#0()) -> #true()
          #eq(#0(),#neg(y)) -> #false()
          #eq(#0(),#pos(y)) -> #false()
          #eq(#0(),#s(y)) -> #false()
          #eq(#neg(x),#0()) -> #false()
          #eq(#neg(x),#neg(y)) -> #eq(x,y)
          #eq(#neg(x),#pos(y)) -> #false()
          #eq(#pos(x),#0()) -> #false()
          #eq(#pos(x),#neg(y)) -> #false()
          #eq(#pos(x),#pos(y)) -> #eq(x,y)
          #eq(#s(x),#0()) -> #false()
          #eq(#s(x),#s(y)) -> #eq(x,y)
          #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
          #eq(dd(x'1,x'2),nil()) -> #false()
          #eq(nil(),dd(y'1,y'2)) -> #false()
          #eq(nil(),nil()) -> #true()
          #equal(x,y) -> #eq(x,y)
          and(x,y) -> #and(x,y)
          eq(l1,l2) -> eq#1(l1,l2)
          eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
          eq#1(nil(),l2) -> eq#2(l2)
          eq#2(dd(y,ys)) -> #false()
          eq#2(nil()) -> #true()
          eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
          eq#3(nil(),x,xs) -> #false()
          remove(x,l) -> remove#1(l,x)
          remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
          remove#1(nil(),x) -> nil()
          remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
          remove#2(#true(),x,y,ys) -> remove(x,ys)
          #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
          #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
          #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          #equal#(x,y) -> c_21(#eq#(x,y))
          eq#(l1,l2) -> c_23(eq#1#(l1,l2))
          eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
          eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
          nub#(l) -> c_30(nub#1#(l))
          nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
          remove#(x,l) -> c_33(remove#1#(l,x))
          remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
          remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
          remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
* Step 7: DecomposeDG WORST_CASE(?,O(n^4))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        DecomposeDG {onSelection = all below first cut in WDG, onUpper = Nothing, onLower = Nothing}
    + Details:
        We decompose the input problem according to the dependency graph into the upper component
          nub#(l) -> c_30(nub#1#(l))
          nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
        and a lower component
          #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
          #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
          #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          #equal#(x,y) -> c_21(#eq#(x,y))
          eq#(l1,l2) -> c_23(eq#1#(l1,l2))
          eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
          eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
          remove#(x,l) -> c_33(remove#1#(l,x))
          remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
          remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
          remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        Further, following extension rules are added to the lower component.
          nub#(l) -> nub#1#(l)
          nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
          nub#1#(dd(x,xs)) -> remove#(x,xs)
** Step 7.a:1: SimplifyRHS WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        SimplifyRHS
    + Details:
        Consider the dependency graph
          1:S:nub#(l) -> c_30(nub#1#(l))
             -->_1 nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs)):2
          
          2:S:nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)),remove#(x,xs))
             -->_1 nub#(l) -> c_30(nub#1#(l)):1
          
        Due to missing edges in the depndency graph, the right-hand sides of following rules could be simplified:
          nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)))
** Step 7.a:2: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/1,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(c_30) = {1},
            uargs(c_31) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                  
                 p(#and) = [1] x1 + [1] x2 + [0]
                  p(#eq) = [0]                  
               p(#equal) = [0]                  
               p(#false) = [0]                  
                 p(#neg) = [0]                  
                 p(#pos) = [0]                  
                   p(#s) = [1] x1 + [0]         
                p(#true) = [0]                  
                  p(and) = [1] x1 + [1] x2 + [0]
                   p(dd) = [1] x2 + [0]         
                   p(eq) = [0]                  
                 p(eq#1) = [0]                  
                 p(eq#2) = [0]                  
                 p(eq#3) = [0]                  
                  p(nil) = [0]                  
                  p(nub) = [0]                  
                p(nub#1) = [0]                  
               p(remove) = [0]                  
             p(remove#1) = [0]                  
             p(remove#2) = [1] x1 + [0]         
                p(#and#) = [0]                  
                 p(#eq#) = [0]                  
              p(#equal#) = [0]                  
                 p(and#) = [0]                  
                  p(eq#) = [0]                  
                p(eq#1#) = [0]                  
                p(eq#2#) = [1] x1 + [4]         
                p(eq#3#) = [2] x2 + [1] x3 + [4]
                 p(nub#) = [1] x1 + [5]         
               p(nub#1#) = [1] x1 + [0]         
              p(remove#) = [0]                  
            p(remove#1#) = [0]                  
            p(remove#2#) = [0]                  
                  p(c_1) = [0]                  
                  p(c_2) = [0]                  
                  p(c_3) = [0]                  
                  p(c_4) = [0]                  
                  p(c_5) = [0]                  
                  p(c_6) = [0]                  
                  p(c_7) = [0]                  
                  p(c_8) = [0]                  
                  p(c_9) = [0]                  
                 p(c_10) = [0]                  
                 p(c_11) = [0]                  
                 p(c_12) = [0]                  
                 p(c_13) = [0]                  
                 p(c_14) = [2]                  
                 p(c_15) = [0]                  
                 p(c_16) = [0]                  
                 p(c_17) = [0]                  
                 p(c_18) = [0]                  
                 p(c_19) = [0]                  
                 p(c_20) = [0]                  
                 p(c_21) = [0]                  
                 p(c_22) = [0]                  
                 p(c_23) = [0]                  
                 p(c_24) = [0]                  
                 p(c_25) = [0]                  
                 p(c_26) = [0]                  
                 p(c_27) = [0]                  
                 p(c_28) = [0]                  
                 p(c_29) = [0]                  
                 p(c_30) = [1] x1 + [0]         
                 p(c_31) = [1] x1 + [1]         
                 p(c_32) = [0]                  
                 p(c_33) = [0]                  
                 p(c_34) = [0]                  
                 p(c_35) = [0]                  
                 p(c_36) = [0]                  
                 p(c_37) = [0]                  
          
          Following rules are strictly oriented:
          nub#(l) = [1] l + [5]    
                  > [1] l + [0]    
                  = c_30(nub#1#(l))
          
          
          Following rules are (at-least) weakly oriented:
                      nub#1#(dd(x,xs)) =  [1] xs + [0]                   
                                       >= [6]                            
                                       =  c_31(nub#(remove(x,xs)))       
          
               #and(#false(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#false(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#true(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                 #and(#true(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                        #eq(#0(),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                     #eq(#0(),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#0(),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                       #eq(#0(),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#neg(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#neg(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                  #eq(#neg(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#pos(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                       #eq(#s(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(#s(x),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
          #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #and(#eq(x'1,y'1),#eq(x'2,y'2))
          
                #eq(dd(x'1,x'2),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #eq(nil(),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(nil(),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                           #equal(x,y) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                              and(x,y) =  [1] x + [1] y + [0]            
                                       >= [1] x + [1] y + [0]            
                                       =  #and(x,y)                      
          
                             eq(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#1(l1,l2)                    
          
                     eq#1(dd(x,xs),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#3(l2,x,xs)                  
          
                        eq#1(nil(),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#2(l2)                       
          
                        eq#2(dd(y,ys)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           eq#2(nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                   eq#3(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  and(#equal(x,y),eq(xs,ys))     
          
                      eq#3(nil(),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           remove(x,l) =  [0]                            
                                       >= [0]                            
                                       =  remove#1(l,x)                  
          
                  remove#1(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  remove#2(eq(x,y),x,y,ys)       
          
                     remove#1(nil(),x) =  [0]                            
                                       >= [0]                            
                                       =  nil()                          
          
             remove#2(#false(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  dd(y,remove(x,ys))             
          
              remove#2(#true(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove(x,ys)                   
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
** Step 7.a:3: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)))
        - Weak DPs:
            nub#(l) -> c_30(nub#1#(l))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/1,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(c_30) = {1},
            uargs(c_31) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                  
                 p(#and) = [1] x1 + [1] x2 + [0]
                  p(#eq) = [0]                  
               p(#equal) = [0]                  
               p(#false) = [0]                  
                 p(#neg) = [1] x1 + [0]         
                 p(#pos) = [1] x1 + [0]         
                   p(#s) = [4]                  
                p(#true) = [0]                  
                  p(and) = [1] x1 + [1] x2 + [0]
                   p(dd) = [1] x2 + [1]         
                   p(eq) = [0]                  
                 p(eq#1) = [0]                  
                 p(eq#2) = [0]                  
                 p(eq#3) = [0]                  
                  p(nil) = [4]                  
                  p(nub) = [4] x1 + [1]         
                p(nub#1) = [4] x1 + [1]         
               p(remove) = [1] x2 + [0]         
             p(remove#1) = [1] x1 + [0]         
             p(remove#2) = [1] x1 + [1] x4 + [1]
                p(#and#) = [2]                  
                 p(#eq#) = [1] x1 + [2] x2 + [0]
              p(#equal#) = [4] x1 + [4] x2 + [0]
                 p(and#) = [1] x1 + [1] x2 + [0]
                  p(eq#) = [0]                  
                p(eq#1#) = [1]                  
                p(eq#2#) = [4] x1 + [4]         
                p(eq#3#) = [1] x3 + [0]         
                 p(nub#) = [1] x1 + [0]         
               p(nub#1#) = [1] x1 + [0]         
              p(remove#) = [2] x1 + [1] x2 + [2]
            p(remove#1#) = [0]                  
            p(remove#2#) = [4] x4 + [1]         
                  p(c_1) = [0]                  
                  p(c_2) = [0]                  
                  p(c_3) = [4]                  
                  p(c_4) = [0]                  
                  p(c_5) = [0]                  
                  p(c_6) = [2]                  
                  p(c_7) = [1]                  
                  p(c_8) = [0]                  
                  p(c_9) = [1]                  
                 p(c_10) = [4] x1 + [4]         
                 p(c_11) = [1]                  
                 p(c_12) = [1]                  
                 p(c_13) = [2]                  
                 p(c_14) = [1]                  
                 p(c_15) = [1]                  
                 p(c_16) = [0]                  
                 p(c_17) = [1] x2 + [1]         
                 p(c_18) = [0]                  
                 p(c_19) = [1]                  
                 p(c_20) = [1]                  
                 p(c_21) = [1] x1 + [4]         
                 p(c_22) = [1] x1 + [1]         
                 p(c_23) = [0]                  
                 p(c_24) = [1] x1 + [0]         
                 p(c_25) = [1] x1 + [0]         
                 p(c_26) = [0]                  
                 p(c_27) = [1]                  
                 p(c_28) = [0]                  
                 p(c_29) = [1]                  
                 p(c_30) = [1] x1 + [0]         
                 p(c_31) = [1] x1 + [0]         
                 p(c_32) = [1]                  
                 p(c_33) = [1]                  
                 p(c_34) = [1] x1 + [1] x2 + [0]
                 p(c_35) = [1]                  
                 p(c_36) = [1]                  
                 p(c_37) = [1] x1 + [0]         
          
          Following rules are strictly oriented:
          nub#1#(dd(x,xs)) = [1] xs + [1]            
                           > [1] xs + [0]            
                           = c_31(nub#(remove(x,xs)))
          
          
          Following rules are (at-least) weakly oriented:
                               nub#(l) =  [1] l + [0]                    
                                       >= [1] l + [0]                    
                                       =  c_30(nub#1#(l))                
          
               #and(#false(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#false(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#true(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                 #and(#true(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                        #eq(#0(),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                     #eq(#0(),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#0(),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                       #eq(#0(),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#neg(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#neg(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                  #eq(#neg(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#pos(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                       #eq(#s(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(#s(x),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
          #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #and(#eq(x'1,y'1),#eq(x'2,y'2))
          
                #eq(dd(x'1,x'2),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #eq(nil(),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(nil(),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                           #equal(x,y) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                              and(x,y) =  [1] x + [1] y + [0]            
                                       >= [1] x + [1] y + [0]            
                                       =  #and(x,y)                      
          
                             eq(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#1(l1,l2)                    
          
                     eq#1(dd(x,xs),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#3(l2,x,xs)                  
          
                        eq#1(nil(),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#2(l2)                       
          
                        eq#2(dd(y,ys)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           eq#2(nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                   eq#3(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  and(#equal(x,y),eq(xs,ys))     
          
                      eq#3(nil(),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           remove(x,l) =  [1] l + [0]                    
                                       >= [1] l + [0]                    
                                       =  remove#1(l,x)                  
          
                  remove#1(dd(y,ys),x) =  [1] ys + [1]                   
                                       >= [1] ys + [1]                   
                                       =  remove#2(eq(x,y),x,y,ys)       
          
                     remove#1(nil(),x) =  [4]                            
                                       >= [4]                            
                                       =  nil()                          
          
             remove#2(#false(),x,y,ys) =  [1] ys + [1]                   
                                       >= [1] ys + [1]                   
                                       =  dd(y,remove(x,ys))             
          
              remove#2(#true(),x,y,ys) =  [1] ys + [1]                   
                                       >= [1] ys + [0]                   
                                       =  remove(x,ys)                   
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
** Step 7.a:4: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            nub#(l) -> c_30(nub#1#(l))
            nub#1#(dd(x,xs)) -> c_31(nub#(remove(x,xs)))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/1,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

** Step 7.b:1: DecomposeDG WORST_CASE(?,O(n^3))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        DecomposeDG {onSelection = all below first cut in WDG, onUpper = Nothing, onLower = Nothing}
    + Details:
        We decompose the input problem according to the dependency graph into the upper component
          nub#(l) -> nub#1#(l)
          nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
          nub#1#(dd(x,xs)) -> remove#(x,xs)
          remove#(x,l) -> c_33(remove#1#(l,x))
          remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
          remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
          remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        and a lower component
          #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
          #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
          #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          #equal#(x,y) -> c_21(#eq#(x,y))
          eq#(l1,l2) -> c_23(eq#1#(l1,l2))
          eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
          eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
        Further, following extension rules are added to the lower component.
          nub#(l) -> nub#1#(l)
          nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
          nub#1#(dd(x,xs)) -> remove#(x,xs)
          remove#(x,l) -> remove#1#(l,x)
          remove#1#(dd(y,ys),x) -> eq#(x,y)
          remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
          remove#2#(#false(),x,y,ys) -> remove#(x,ys)
          remove#2#(#true(),x,y,ys) -> remove#(x,ys)
*** Step 7.b:1.a:1: SimplifyRHS WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        SimplifyRHS
    + Details:
        Consider the dependency graph
          1:S:remove#(x,l) -> c_33(remove#1#(l,x))
             -->_1 remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y)):2
          
          2:S:remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys),eq#(x,y))
             -->_1 remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys)):4
             -->_1 remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys)):3
          
          3:S:remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
             -->_1 remove#(x,l) -> c_33(remove#1#(l,x)):1
          
          4:S:remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
             -->_1 remove#(x,l) -> c_33(remove#1#(l,x)):1
          
          5:W:nub#(l) -> nub#1#(l)
             -->_1 nub#1#(dd(x,xs)) -> remove#(x,xs):7
             -->_1 nub#1#(dd(x,xs)) -> nub#(remove(x,xs)):6
          
          6:W:nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
             -->_1 nub#(l) -> nub#1#(l):5
          
          7:W:nub#1#(dd(x,xs)) -> remove#(x,xs)
             -->_1 remove#(x,l) -> c_33(remove#1#(l,x)):1
          
        Due to missing edges in the depndency graph, the right-hand sides of following rules could be simplified:
          remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys))
*** Step 7.b:1.a:2: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/1,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_33) = {1},
            uargs(c_34) = {1},
            uargs(c_36) = {1},
            uargs(c_37) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                  
                 p(#and) = [1] x1 + [1] x2 + [0]
                  p(#eq) = [0]                  
               p(#equal) = [0]                  
               p(#false) = [0]                  
                 p(#neg) = [1] x1 + [0]         
                 p(#pos) = [1] x1 + [0]         
                   p(#s) = [0]                  
                p(#true) = [0]                  
                  p(and) = [1] x1 + [1] x2 + [0]
                   p(dd) = [1] x2 + [0]         
                   p(eq) = [0]                  
                 p(eq#1) = [0]                  
                 p(eq#2) = [0]                  
                 p(eq#3) = [0]                  
                  p(nil) = [0]                  
                  p(nub) = [0]                  
                p(nub#1) = [0]                  
               p(remove) = [0]                  
             p(remove#1) = [0]                  
             p(remove#2) = [1] x1 + [0]         
                p(#and#) = [0]                  
                 p(#eq#) = [0]                  
              p(#equal#) = [0]                  
                 p(and#) = [0]                  
                  p(eq#) = [1]                  
                p(eq#1#) = [0]                  
                p(eq#2#) = [0]                  
                p(eq#3#) = [0]                  
                 p(nub#) = [1] x1 + [4]         
               p(nub#1#) = [1] x1 + [4]         
              p(remove#) = [4]                  
            p(remove#1#) = [1]                  
            p(remove#2#) = [1] x1 + [5]         
                  p(c_1) = [0]                  
                  p(c_2) = [0]                  
                  p(c_3) = [0]                  
                  p(c_4) = [0]                  
                  p(c_5) = [0]                  
                  p(c_6) = [0]                  
                  p(c_7) = [0]                  
                  p(c_8) = [0]                  
                  p(c_9) = [0]                  
                 p(c_10) = [0]                  
                 p(c_11) = [0]                  
                 p(c_12) = [0]                  
                 p(c_13) = [0]                  
                 p(c_14) = [0]                  
                 p(c_15) = [0]                  
                 p(c_16) = [0]                  
                 p(c_17) = [0]                  
                 p(c_18) = [0]                  
                 p(c_19) = [0]                  
                 p(c_20) = [0]                  
                 p(c_21) = [0]                  
                 p(c_22) = [0]                  
                 p(c_23) = [0]                  
                 p(c_24) = [0]                  
                 p(c_25) = [0]                  
                 p(c_26) = [0]                  
                 p(c_27) = [0]                  
                 p(c_28) = [0]                  
                 p(c_29) = [0]                  
                 p(c_30) = [0]                  
                 p(c_31) = [0]                  
                 p(c_32) = [0]                  
                 p(c_33) = [1] x1 + [7]         
                 p(c_34) = [1] x1 + [0]         
                 p(c_35) = [0]                  
                 p(c_36) = [1] x1 + [0]         
                 p(c_37) = [1] x1 + [0]         
          
          Following rules are strictly oriented:
          remove#2#(#false(),x,y,ys) = [5]                
                                     > [4]                
                                     = c_36(remove#(x,ys))
          
           remove#2#(#true(),x,y,ys) = [5]                
                                     > [4]                
                                     = c_37(remove#(x,ys))
          
          
          Following rules are (at-least) weakly oriented:
                               nub#(l) =  [1] l + [4]                    
                                       >= [1] l + [4]                    
                                       =  nub#1#(l)                      
          
                      nub#1#(dd(x,xs)) =  [1] xs + [4]                   
                                       >= [4]                            
                                       =  nub#(remove(x,xs))             
          
                      nub#1#(dd(x,xs)) =  [1] xs + [4]                   
                                       >= [4]                            
                                       =  remove#(x,xs)                  
          
                          remove#(x,l) =  [4]                            
                                       >= [8]                            
                                       =  c_33(remove#1#(l,x))           
          
                 remove#1#(dd(y,ys),x) =  [1]                            
                                       >= [5]                            
                                       =  c_34(remove#2#(eq(x,y),x,y,ys))
          
               #and(#false(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#false(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#true(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                 #and(#true(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                        #eq(#0(),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                     #eq(#0(),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#0(),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                       #eq(#0(),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#neg(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#neg(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                  #eq(#neg(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#pos(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                       #eq(#s(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(#s(x),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
          #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #and(#eq(x'1,y'1),#eq(x'2,y'2))
          
                #eq(dd(x'1,x'2),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #eq(nil(),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(nil(),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                           #equal(x,y) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                              and(x,y) =  [1] x + [1] y + [0]            
                                       >= [1] x + [1] y + [0]            
                                       =  #and(x,y)                      
          
                             eq(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#1(l1,l2)                    
          
                     eq#1(dd(x,xs),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#3(l2,x,xs)                  
          
                        eq#1(nil(),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#2(l2)                       
          
                        eq#2(dd(y,ys)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           eq#2(nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                   eq#3(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  and(#equal(x,y),eq(xs,ys))     
          
                      eq#3(nil(),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           remove(x,l) =  [0]                            
                                       >= [0]                            
                                       =  remove#1(l,x)                  
          
                  remove#1(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  remove#2(eq(x,y),x,y,ys)       
          
                     remove#1(nil(),x) =  [0]                            
                                       >= [0]                            
                                       =  nil()                          
          
             remove#2(#false(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  dd(y,remove(x,ys))             
          
              remove#2(#true(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove(x,ys)                   
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
*** Step 7.b:1.a:3: NaturalMI WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/1,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Just any strict-rules}
    + Details:
        We apply a matrix interpretation of kind constructor based matrix interpretation:
        The following argument positions are considered usable:
          uargs(c_33) = {1},
          uargs(c_34) = {1},
          uargs(c_36) = {1},
          uargs(c_37) = {1}
        
        Following symbols are considered usable:
          {remove,remove#1,remove#2,#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#,remove#,remove#1#
          ,remove#2#}
        TcT has computed the following interpretation:
                 p(#0) = [2]                  
               p(#and) = [0]                  
                p(#eq) = [1] x1 + [2] x2 + [0]
             p(#equal) = [2] x1 + [2]         
             p(#false) = [0]                  
               p(#neg) = [1] x1 + [2]         
               p(#pos) = [1]                  
                 p(#s) = [3]                  
              p(#true) = [0]                  
                p(and) = [1] x1 + [2]         
                 p(dd) = [1] x1 + [1] x2 + [1]
                 p(eq) = [0]                  
               p(eq#1) = [0]                  
               p(eq#2) = [0]                  
               p(eq#3) = [1]                  
                p(nil) = [0]                  
                p(nub) = [1] x1 + [4]         
              p(nub#1) = [1] x1 + [0]         
             p(remove) = [1] x2 + [0]         
           p(remove#1) = [1] x1 + [0]         
           p(remove#2) = [1] x3 + [1] x4 + [1]
              p(#and#) = [1] x1 + [1] x2 + [1]
               p(#eq#) = [4] x2 + [0]         
            p(#equal#) = [1] x1 + [0]         
               p(and#) = [1] x1 + [0]         
                p(eq#) = [4] x2 + [2]         
              p(eq#1#) = [0]                  
              p(eq#2#) = [1] x1 + [4]         
              p(eq#3#) = [1] x1 + [1] x2 + [4]
               p(nub#) = [5] x1 + [0]         
             p(nub#1#) = [5] x1 + [0]         
            p(remove#) = [4] x2 + [2]         
          p(remove#1#) = [4] x1 + [0]         
          p(remove#2#) = [4] x3 + [4] x4 + [3]
                p(c_1) = [1]                  
                p(c_2) = [4]                  
                p(c_3) = [0]                  
                p(c_4) = [0]                  
                p(c_5) = [0]                  
                p(c_6) = [2]                  
                p(c_7) = [0]                  
                p(c_8) = [0]                  
                p(c_9) = [0]                  
               p(c_10) = [1]                  
               p(c_11) = [0]                  
               p(c_12) = [0]                  
               p(c_13) = [0]                  
               p(c_14) = [2] x1 + [4]         
               p(c_15) = [0]                  
               p(c_16) = [1] x1 + [0]         
               p(c_17) = [2]                  
               p(c_18) = [1]                  
               p(c_19) = [0]                  
               p(c_20) = [0]                  
               p(c_21) = [1] x1 + [0]         
               p(c_22) = [1]                  
               p(c_23) = [0]                  
               p(c_24) = [4]                  
               p(c_25) = [1] x1 + [1]         
               p(c_26) = [0]                  
               p(c_27) = [4]                  
               p(c_28) = [1] x2 + [1]         
               p(c_29) = [1]                  
               p(c_30) = [4]                  
               p(c_31) = [4]                  
               p(c_32) = [1]                  
               p(c_33) = [1] x1 + [2]         
               p(c_34) = [1] x1 + [0]         
               p(c_35) = [1]                  
               p(c_36) = [1] x1 + [0]         
               p(c_37) = [1] x1 + [1]         
        
        Following rules are strictly oriented:
        remove#1#(dd(y,ys),x) = [4] y + [4] ys + [4]           
                              > [4] y + [4] ys + [3]           
                              = c_34(remove#2#(eq(x,y),x,y,ys))
        
        
        Following rules are (at-least) weakly oriented:
                           nub#(l) =  [5] l + [0]             
                                   >= [5] l + [0]             
                                   =  nub#1#(l)               
        
                  nub#1#(dd(x,xs)) =  [5] x + [5] xs + [5]    
                                   >= [5] xs + [0]            
                                   =  nub#(remove(x,xs))      
        
                  nub#1#(dd(x,xs)) =  [5] x + [5] xs + [5]    
                                   >= [4] xs + [2]            
                                   =  remove#(x,xs)           
        
                      remove#(x,l) =  [4] l + [2]             
                                   >= [4] l + [2]             
                                   =  c_33(remove#1#(l,x))    
        
        remove#2#(#false(),x,y,ys) =  [4] y + [4] ys + [3]    
                                   >= [4] ys + [2]            
                                   =  c_36(remove#(x,ys))     
        
         remove#2#(#true(),x,y,ys) =  [4] y + [4] ys + [3]    
                                   >= [4] ys + [3]            
                                   =  c_37(remove#(x,ys))     
        
                       remove(x,l) =  [1] l + [0]             
                                   >= [1] l + [0]             
                                   =  remove#1(l,x)           
        
              remove#1(dd(y,ys),x) =  [1] y + [1] ys + [1]    
                                   >= [1] y + [1] ys + [1]    
                                   =  remove#2(eq(x,y),x,y,ys)
        
                 remove#1(nil(),x) =  [0]                     
                                   >= [0]                     
                                   =  nil()                   
        
         remove#2(#false(),x,y,ys) =  [1] y + [1] ys + [1]    
                                   >= [1] y + [1] ys + [1]    
                                   =  dd(y,remove(x,ys))      
        
          remove#2(#true(),x,y,ys) =  [1] y + [1] ys + [1]    
                                   >= [1] ys + [0]            
                                   =  remove(x,ys)            
        
*** Step 7.b:1.a:4: NaturalMI WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            remove#(x,l) -> c_33(remove#1#(l,x))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/1,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Just any strict-rules}
    + Details:
        We apply a matrix interpretation of kind constructor based matrix interpretation:
        The following argument positions are considered usable:
          uargs(c_33) = {1},
          uargs(c_34) = {1},
          uargs(c_36) = {1},
          uargs(c_37) = {1}
        
        Following symbols are considered usable:
          {#and,and,eq,eq#1,eq#2,eq#3,remove,remove#1,remove#2,#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#
          ,nub#1#,remove#,remove#1#,remove#2#}
        TcT has computed the following interpretation:
                 p(#0) = [0]                           
               p(#and) = [3]                           
                p(#eq) = [5] x2 + [0]                  
             p(#equal) = [0]                           
             p(#false) = [2]                           
               p(#neg) = [1] x1 + [2]                  
               p(#pos) = [1] x1 + [0]                  
                 p(#s) = [0]                           
              p(#true) = [3]                           
                p(and) = [3]                           
                 p(dd) = [1] x1 + [1] x2 + [2]         
                 p(eq) = [3] x2 + [7]                  
               p(eq#1) = [3]                           
               p(eq#2) = [3]                           
               p(eq#3) = [3]                           
                p(nil) = [0]                           
                p(nub) = [1] x1 + [1]                  
              p(nub#1) = [4] x1 + [1]                  
             p(remove) = [1] x1 + [1] x2 + [0]         
           p(remove#1) = [1] x1 + [1] x2 + [0]         
           p(remove#2) = [1] x2 + [1] x3 + [1] x4 + [2]
              p(#and#) = [2] x1 + [2]                  
               p(#eq#) = [1] x1 + [1] x2 + [0]         
            p(#equal#) = [4] x1 + [0]                  
               p(and#) = [1] x1 + [0]                  
                p(eq#) = [1] x1 + [4]                  
              p(eq#1#) = [1] x1 + [1]                  
              p(eq#2#) = [2] x1 + [1]                  
              p(eq#3#) = [1] x1 + [2]                  
               p(nub#) = [6] x1 + [2]                  
             p(nub#1#) = [6] x1 + [2]                  
            p(remove#) = [6] x2 + [3]                  
          p(remove#1#) = [6] x1 + [2]                  
          p(remove#2#) = [2] x1 + [6] x4 + [0]         
                p(c_1) = [0]                           
                p(c_2) = [2]                           
                p(c_3) = [1]                           
                p(c_4) = [0]                           
                p(c_5) = [0]                           
                p(c_6) = [0]                           
                p(c_7) = [0]                           
                p(c_8) = [0]                           
                p(c_9) = [0]                           
               p(c_10) = [4] x1 + [0]                  
               p(c_11) = [0]                           
               p(c_12) = [0]                           
               p(c_13) = [0]                           
               p(c_14) = [0]                           
               p(c_15) = [0]                           
               p(c_16) = [0]                           
               p(c_17) = [1] x2 + [2]                  
               p(c_18) = [4]                           
               p(c_19) = [0]                           
               p(c_20) = [0]                           
               p(c_21) = [1]                           
               p(c_22) = [0]                           
               p(c_23) = [1]                           
               p(c_24) = [0]                           
               p(c_25) = [4]                           
               p(c_26) = [0]                           
               p(c_27) = [0]                           
               p(c_28) = [4] x1 + [4] x2 + [1]         
               p(c_29) = [0]                           
               p(c_30) = [4] x1 + [0]                  
               p(c_31) = [1] x1 + [2]                  
               p(c_32) = [4]                           
               p(c_33) = [1] x1 + [0]                  
               p(c_34) = [1] x1 + [0]                  
               p(c_35) = [0]                           
               p(c_36) = [1] x1 + [0]                  
               p(c_37) = [1] x1 + [2]                  
        
        Following rules are strictly oriented:
        remove#(x,l) = [6] l + [3]         
                     > [6] l + [2]         
                     = c_33(remove#1#(l,x))
        
        
        Following rules are (at-least) weakly oriented:
                           nub#(l) =  [6] l + [2]                    
                                   >= [6] l + [2]                    
                                   =  nub#1#(l)                      
        
                  nub#1#(dd(x,xs)) =  [6] x + [6] xs + [14]          
                                   >= [6] x + [6] xs + [2]           
                                   =  nub#(remove(x,xs))             
        
                  nub#1#(dd(x,xs)) =  [6] x + [6] xs + [14]          
                                   >= [6] xs + [3]                   
                                   =  remove#(x,xs)                  
        
             remove#1#(dd(y,ys),x) =  [6] y + [6] ys + [14]          
                                   >= [6] y + [6] ys + [14]          
                                   =  c_34(remove#2#(eq(x,y),x,y,ys))
        
        remove#2#(#false(),x,y,ys) =  [6] ys + [4]                   
                                   >= [6] ys + [3]                   
                                   =  c_36(remove#(x,ys))            
        
         remove#2#(#true(),x,y,ys) =  [6] ys + [6]                   
                                   >= [6] ys + [5]                   
                                   =  c_37(remove#(x,ys))            
        
           #and(#false(),#false()) =  [3]                            
                                   >= [2]                            
                                   =  #false()                       
        
            #and(#false(),#true()) =  [3]                            
                                   >= [2]                            
                                   =  #false()                       
        
            #and(#true(),#false()) =  [3]                            
                                   >= [2]                            
                                   =  #false()                       
        
             #and(#true(),#true()) =  [3]                            
                                   >= [3]                            
                                   =  #true()                        
        
                          and(x,y) =  [3]                            
                                   >= [3]                            
                                   =  #and(x,y)                      
        
                         eq(l1,l2) =  [3] l2 + [7]                   
                                   >= [3]                            
                                   =  eq#1(l1,l2)                    
        
                 eq#1(dd(x,xs),l2) =  [3]                            
                                   >= [3]                            
                                   =  eq#3(l2,x,xs)                  
        
                    eq#1(nil(),l2) =  [3]                            
                                   >= [3]                            
                                   =  eq#2(l2)                       
        
                    eq#2(dd(y,ys)) =  [3]                            
                                   >= [2]                            
                                   =  #false()                       
        
                       eq#2(nil()) =  [3]                            
                                   >= [3]                            
                                   =  #true()                        
        
               eq#3(dd(y,ys),x,xs) =  [3]                            
                                   >= [3]                            
                                   =  and(#equal(x,y),eq(xs,ys))     
        
                  eq#3(nil(),x,xs) =  [3]                            
                                   >= [2]                            
                                   =  #false()                       
        
                       remove(x,l) =  [1] l + [1] x + [0]            
                                   >= [1] l + [1] x + [0]            
                                   =  remove#1(l,x)                  
        
              remove#1(dd(y,ys),x) =  [1] x + [1] y + [1] ys + [2]   
                                   >= [1] x + [1] y + [1] ys + [2]   
                                   =  remove#2(eq(x,y),x,y,ys)       
        
                 remove#1(nil(),x) =  [1] x + [0]                    
                                   >= [0]                            
                                   =  nil()                          
        
         remove#2(#false(),x,y,ys) =  [1] x + [1] y + [1] ys + [2]   
                                   >= [1] x + [1] y + [1] ys + [2]   
                                   =  dd(y,remove(x,ys))             
        
          remove#2(#true(),x,y,ys) =  [1] x + [1] y + [1] ys + [2]   
                                   >= [1] x + [1] ys + [0]           
                                   =  remove(x,ys)                   
        
*** Step 7.b:1.a:5: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> c_33(remove#1#(l,x))
            remove#1#(dd(y,ys),x) -> c_34(remove#2#(eq(x,y),x,y,ys))
            remove#2#(#false(),x,y,ys) -> c_36(remove#(x,ys))
            remove#2#(#true(),x,y,ys) -> c_37(remove#(x,ys))
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/1,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

*** Step 7.b:1.b:1: DecomposeDG WORST_CASE(?,O(n^2))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        DecomposeDG {onSelection = all below first cut in WDG, onUpper = Nothing, onLower = Nothing}
    + Details:
        We decompose the input problem according to the dependency graph into the upper component
          eq#(l1,l2) -> c_23(eq#1#(l1,l2))
          eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
          eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
          nub#(l) -> nub#1#(l)
          nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
          nub#1#(dd(x,xs)) -> remove#(x,xs)
          remove#(x,l) -> remove#1#(l,x)
          remove#1#(dd(y,ys),x) -> eq#(x,y)
          remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
          remove#2#(#false(),x,y,ys) -> remove#(x,ys)
          remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        and a lower component
          #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
          #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
          #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          #equal#(x,y) -> c_21(#eq#(x,y))
        Further, following extension rules are added to the lower component.
          eq#(l1,l2) -> eq#1#(l1,l2)
          eq#1#(dd(x,xs),l2) -> eq#3#(l2,x,xs)
          eq#3#(dd(y,ys),x,xs) -> #equal#(x,y)
          eq#3#(dd(y,ys),x,xs) -> eq#(xs,ys)
          nub#(l) -> nub#1#(l)
          nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
          nub#1#(dd(x,xs)) -> remove#(x,xs)
          remove#(x,l) -> remove#1#(l,x)
          remove#1#(dd(y,ys),x) -> eq#(x,y)
          remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
          remove#2#(#false(),x,y,ys) -> remove#(x,ys)
          remove#2#(#true(),x,y,ys) -> remove#(x,ys)
**** Step 7.b:1.b:1.a:1: SimplifyRHS WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        SimplifyRHS
    + Details:
        Consider the dependency graph
          1:S:eq#(l1,l2) -> c_23(eq#1#(l1,l2))
             -->_1 eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs)):2
          
          2:S:eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
             -->_1 eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys)):3
          
          3:S:eq#3#(dd(y,ys),x,xs) -> c_28(#equal#(x,y),eq#(xs,ys))
             -->_2 eq#(l1,l2) -> c_23(eq#1#(l1,l2)):1
          
          4:W:nub#(l) -> nub#1#(l)
             -->_1 nub#1#(dd(x,xs)) -> remove#(x,xs):6
             -->_1 nub#1#(dd(x,xs)) -> nub#(remove(x,xs)):5
          
          5:W:nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
             -->_1 nub#(l) -> nub#1#(l):4
          
          6:W:nub#1#(dd(x,xs)) -> remove#(x,xs)
             -->_1 remove#(x,l) -> remove#1#(l,x):7
          
          7:W:remove#(x,l) -> remove#1#(l,x)
             -->_1 remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys):9
             -->_1 remove#1#(dd(y,ys),x) -> eq#(x,y):8
          
          8:W:remove#1#(dd(y,ys),x) -> eq#(x,y)
             -->_1 eq#(l1,l2) -> c_23(eq#1#(l1,l2)):1
          
          9:W:remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
             -->_1 remove#2#(#true(),x,y,ys) -> remove#(x,ys):11
             -->_1 remove#2#(#false(),x,y,ys) -> remove#(x,ys):10
          
          10:W:remove#2#(#false(),x,y,ys) -> remove#(x,ys)
             -->_1 remove#(x,l) -> remove#1#(l,x):7
          
          11:W:remove#2#(#true(),x,y,ys) -> remove#(x,ys)
             -->_1 remove#(x,l) -> remove#1#(l,x):7
          
        Due to missing edges in the depndency graph, the right-hand sides of following rules could be simplified:
          eq#3#(dd(y,ys),x,xs) -> c_28(eq#(xs,ys))
**** Step 7.b:1.b:1.a:2: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(eq#(xs,ys))
        - Weak DPs:
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/1,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_23) = {1},
            uargs(c_24) = {1},
            uargs(c_28) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                  
                 p(#and) = [1] x1 + [1] x2 + [0]
                  p(#eq) = [0]                  
               p(#equal) = [0]                  
               p(#false) = [0]                  
                 p(#neg) = [1] x1 + [0]         
                 p(#pos) = [1] x1 + [0]         
                   p(#s) = [1] x1 + [0]         
                p(#true) = [0]                  
                  p(and) = [1] x1 + [1] x2 + [0]
                   p(dd) = [1] x2 + [0]         
                   p(eq) = [0]                  
                 p(eq#1) = [0]                  
                 p(eq#2) = [0]                  
                 p(eq#3) = [0]                  
                  p(nil) = [0]                  
                  p(nub) = [0]                  
                p(nub#1) = [0]                  
               p(remove) = [0]                  
             p(remove#1) = [0]                  
             p(remove#2) = [1] x1 + [0]         
                p(#and#) = [0]                  
                 p(#eq#) = [0]                  
              p(#equal#) = [0]                  
                 p(and#) = [0]                  
                  p(eq#) = [0]                  
                p(eq#1#) = [0]                  
                p(eq#2#) = [0]                  
                p(eq#3#) = [1]                  
                 p(nub#) = [1] x1 + [0]         
               p(nub#1#) = [0]                  
              p(remove#) = [0]                  
            p(remove#1#) = [0]                  
            p(remove#2#) = [1] x1 + [0]         
                  p(c_1) = [0]                  
                  p(c_2) = [0]                  
                  p(c_3) = [0]                  
                  p(c_4) = [0]                  
                  p(c_5) = [0]                  
                  p(c_6) = [0]                  
                  p(c_7) = [0]                  
                  p(c_8) = [0]                  
                  p(c_9) = [0]                  
                 p(c_10) = [0]                  
                 p(c_11) = [0]                  
                 p(c_12) = [0]                  
                 p(c_13) = [0]                  
                 p(c_14) = [0]                  
                 p(c_15) = [0]                  
                 p(c_16) = [0]                  
                 p(c_17) = [0]                  
                 p(c_18) = [0]                  
                 p(c_19) = [0]                  
                 p(c_20) = [0]                  
                 p(c_21) = [0]                  
                 p(c_22) = [0]                  
                 p(c_23) = [1] x1 + [0]         
                 p(c_24) = [1] x1 + [7]         
                 p(c_25) = [0]                  
                 p(c_26) = [0]                  
                 p(c_27) = [0]                  
                 p(c_28) = [1] x1 + [0]         
                 p(c_29) = [0]                  
                 p(c_30) = [0]                  
                 p(c_31) = [0]                  
                 p(c_32) = [0]                  
                 p(c_33) = [0]                  
                 p(c_34) = [0]                  
                 p(c_35) = [0]                  
                 p(c_36) = [0]                  
                 p(c_37) = [0]                  
          
          Following rules are strictly oriented:
          eq#3#(dd(y,ys),x,xs) = [1]             
                               > [0]             
                               = c_28(eq#(xs,ys))
          
          
          Following rules are (at-least) weakly oriented:
                            eq#(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  c_23(eq#1#(l1,l2))             
          
                    eq#1#(dd(x,xs),l2) =  [0]                            
                                       >= [8]                            
                                       =  c_24(eq#3#(l2,x,xs))           
          
                               nub#(l) =  [1] l + [0]                    
                                       >= [0]                            
                                       =  nub#1#(l)                      
          
                      nub#1#(dd(x,xs)) =  [0]                            
                                       >= [0]                            
                                       =  nub#(remove(x,xs))             
          
                      nub#1#(dd(x,xs)) =  [0]                            
                                       >= [0]                            
                                       =  remove#(x,xs)                  
          
                          remove#(x,l) =  [0]                            
                                       >= [0]                            
                                       =  remove#1#(l,x)                 
          
                 remove#1#(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  eq#(x,y)                       
          
                 remove#1#(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  remove#2#(eq(x,y),x,y,ys)      
          
            remove#2#(#false(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove#(x,ys)                  
          
             remove#2#(#true(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove#(x,ys)                  
          
               #and(#false(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#false(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#true(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                 #and(#true(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                        #eq(#0(),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                     #eq(#0(),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#0(),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                       #eq(#0(),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#neg(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#neg(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                  #eq(#neg(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#pos(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                       #eq(#s(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(#s(x),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
          #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #and(#eq(x'1,y'1),#eq(x'2,y'2))
          
                #eq(dd(x'1,x'2),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #eq(nil(),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(nil(),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                           #equal(x,y) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                              and(x,y) =  [1] x + [1] y + [0]            
                                       >= [1] x + [1] y + [0]            
                                       =  #and(x,y)                      
          
                             eq(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#1(l1,l2)                    
          
                     eq#1(dd(x,xs),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#3(l2,x,xs)                  
          
                        eq#1(nil(),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#2(l2)                       
          
                        eq#2(dd(y,ys)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           eq#2(nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                   eq#3(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  and(#equal(x,y),eq(xs,ys))     
          
                      eq#3(nil(),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           remove(x,l) =  [0]                            
                                       >= [0]                            
                                       =  remove#1(l,x)                  
          
                  remove#1(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  remove#2(eq(x,y),x,y,ys)       
          
                     remove#1(nil(),x) =  [0]                            
                                       >= [0]                            
                                       =  nil()                          
          
             remove#2(#false(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  dd(y,remove(x,ys))             
          
              remove#2(#true(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove(x,ys)                   
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
**** Step 7.b:1.b:1.a:3: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
        - Weak DPs:
            eq#3#(dd(y,ys),x,xs) -> c_28(eq#(xs,ys))
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/1,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_23) = {1},
            uargs(c_24) = {1},
            uargs(c_28) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                  
                 p(#and) = [1] x1 + [1] x2 + [0]
                  p(#eq) = [0]                  
               p(#equal) = [0]                  
               p(#false) = [0]                  
                 p(#neg) = [1] x1 + [0]         
                 p(#pos) = [1] x1 + [0]         
                   p(#s) = [1] x1 + [0]         
                p(#true) = [0]                  
                  p(and) = [1] x1 + [1] x2 + [0]
                   p(dd) = [1] x2 + [0]         
                   p(eq) = [0]                  
                 p(eq#1) = [0]                  
                 p(eq#2) = [0]                  
                 p(eq#3) = [0]                  
                  p(nil) = [0]                  
                  p(nub) = [0]                  
                p(nub#1) = [0]                  
               p(remove) = [0]                  
             p(remove#1) = [0]                  
             p(remove#2) = [1] x1 + [0]         
                p(#and#) = [0]                  
                 p(#eq#) = [0]                  
              p(#equal#) = [0]                  
                 p(and#) = [0]                  
                  p(eq#) = [0]                  
                p(eq#1#) = [5]                  
                p(eq#2#) = [0]                  
                p(eq#3#) = [0]                  
                 p(nub#) = [1] x1 + [0]         
               p(nub#1#) = [0]                  
              p(remove#) = [0]                  
            p(remove#1#) = [0]                  
            p(remove#2#) = [1] x1 + [0]         
                  p(c_1) = [0]                  
                  p(c_2) = [0]                  
                  p(c_3) = [0]                  
                  p(c_4) = [0]                  
                  p(c_5) = [0]                  
                  p(c_6) = [0]                  
                  p(c_7) = [0]                  
                  p(c_8) = [0]                  
                  p(c_9) = [0]                  
                 p(c_10) = [0]                  
                 p(c_11) = [0]                  
                 p(c_12) = [0]                  
                 p(c_13) = [0]                  
                 p(c_14) = [0]                  
                 p(c_15) = [0]                  
                 p(c_16) = [0]                  
                 p(c_17) = [0]                  
                 p(c_18) = [0]                  
                 p(c_19) = [0]                  
                 p(c_20) = [0]                  
                 p(c_21) = [0]                  
                 p(c_22) = [0]                  
                 p(c_23) = [1] x1 + [0]         
                 p(c_24) = [1] x1 + [0]         
                 p(c_25) = [0]                  
                 p(c_26) = [0]                  
                 p(c_27) = [0]                  
                 p(c_28) = [1] x1 + [0]         
                 p(c_29) = [0]                  
                 p(c_30) = [0]                  
                 p(c_31) = [0]                  
                 p(c_32) = [0]                  
                 p(c_33) = [0]                  
                 p(c_34) = [0]                  
                 p(c_35) = [0]                  
                 p(c_36) = [0]                  
                 p(c_37) = [0]                  
          
          Following rules are strictly oriented:
          eq#1#(dd(x,xs),l2) = [5]                 
                             > [0]                 
                             = c_24(eq#3#(l2,x,xs))
          
          
          Following rules are (at-least) weakly oriented:
                            eq#(l1,l2) =  [0]                            
                                       >= [5]                            
                                       =  c_23(eq#1#(l1,l2))             
          
                  eq#3#(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  c_28(eq#(xs,ys))               
          
                               nub#(l) =  [1] l + [0]                    
                                       >= [0]                            
                                       =  nub#1#(l)                      
          
                      nub#1#(dd(x,xs)) =  [0]                            
                                       >= [0]                            
                                       =  nub#(remove(x,xs))             
          
                      nub#1#(dd(x,xs)) =  [0]                            
                                       >= [0]                            
                                       =  remove#(x,xs)                  
          
                          remove#(x,l) =  [0]                            
                                       >= [0]                            
                                       =  remove#1#(l,x)                 
          
                 remove#1#(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  eq#(x,y)                       
          
                 remove#1#(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  remove#2#(eq(x,y),x,y,ys)      
          
            remove#2#(#false(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove#(x,ys)                  
          
             remove#2#(#true(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove#(x,ys)                  
          
               #and(#false(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#false(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#true(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                 #and(#true(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                        #eq(#0(),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                     #eq(#0(),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#0(),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                       #eq(#0(),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#neg(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#neg(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                  #eq(#neg(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#pos(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                       #eq(#s(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(#s(x),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
          #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #and(#eq(x'1,y'1),#eq(x'2,y'2))
          
                #eq(dd(x'1,x'2),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #eq(nil(),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(nil(),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                           #equal(x,y) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                              and(x,y) =  [1] x + [1] y + [0]            
                                       >= [1] x + [1] y + [0]            
                                       =  #and(x,y)                      
          
                             eq(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#1(l1,l2)                    
          
                     eq#1(dd(x,xs),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#3(l2,x,xs)                  
          
                        eq#1(nil(),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#2(l2)                       
          
                        eq#2(dd(y,ys)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           eq#2(nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                   eq#3(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  and(#equal(x,y),eq(xs,ys))     
          
                      eq#3(nil(),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           remove(x,l) =  [0]                            
                                       >= [0]                            
                                       =  remove#1(l,x)                  
          
                  remove#1(dd(y,ys),x) =  [0]                            
                                       >= [0]                            
                                       =  remove#2(eq(x,y),x,y,ys)       
          
                     remove#1(nil(),x) =  [0]                            
                                       >= [0]                            
                                       =  nil()                          
          
             remove#2(#false(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  dd(y,remove(x,ys))             
          
              remove#2(#true(),x,y,ys) =  [0]                            
                                       >= [0]                            
                                       =  remove(x,ys)                   
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
**** Step 7.b:1.b:1.a:4: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
        - Weak DPs:
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(eq#(xs,ys))
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/1,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_23) = {1},
            uargs(c_24) = {1},
            uargs(c_28) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                           
                 p(#and) = [1] x1 + [1] x2 + [0]         
                  p(#eq) = [0]                           
               p(#equal) = [0]                           
               p(#false) = [0]                           
                 p(#neg) = [0]                           
                 p(#pos) = [1] x1 + [0]                  
                   p(#s) = [1] x1 + [0]                  
                p(#true) = [0]                           
                  p(and) = [1] x1 + [1] x2 + [0]         
                   p(dd) = [1] x1 + [1] x2 + [4]         
                   p(eq) = [0]                           
                 p(eq#1) = [0]                           
                 p(eq#2) = [0]                           
                 p(eq#3) = [0]                           
                  p(nil) = [0]                           
                  p(nub) = [0]                           
                p(nub#1) = [0]                           
               p(remove) = [1] x2 + [0]                  
             p(remove#1) = [1] x1 + [0]                  
             p(remove#2) = [1] x1 + [1] x3 + [1] x4 + [4]
                p(#and#) = [0]                           
                 p(#eq#) = [0]                           
              p(#equal#) = [0]                           
                 p(and#) = [0]                           
                  p(eq#) = [1] x2 + [3]                  
                p(eq#1#) = [1] x2 + [1]                  
                p(eq#2#) = [0]                           
                p(eq#3#) = [1] x1 + [1]                  
                 p(nub#) = [1] x1 + [4]                  
               p(nub#1#) = [1] x1 + [0]                  
              p(remove#) = [1] x2 + [2]                  
            p(remove#1#) = [1] x1 + [0]                  
            p(remove#2#) = [1] x1 + [1] x4 + [4]         
                  p(c_1) = [0]                           
                  p(c_2) = [0]                           
                  p(c_3) = [1]                           
                  p(c_4) = [0]                           
                  p(c_5) = [1]                           
                  p(c_6) = [0]                           
                  p(c_7) = [1]                           
                  p(c_8) = [0]                           
                  p(c_9) = [1]                           
                 p(c_10) = [1] x1 + [0]                  
                 p(c_11) = [0]                           
                 p(c_12) = [0]                           
                 p(c_13) = [0]                           
                 p(c_14) = [4] x1 + [0]                  
                 p(c_15) = [0]                           
                 p(c_16) = [0]                           
                 p(c_17) = [2] x1 + [1]                  
                 p(c_18) = [1]                           
                 p(c_19) = [0]                           
                 p(c_20) = [1]                           
                 p(c_21) = [1] x1 + [0]                  
                 p(c_22) = [1] x1 + [0]                  
                 p(c_23) = [1] x1 + [1]                  
                 p(c_24) = [1] x1 + [0]                  
                 p(c_25) = [1] x1 + [1]                  
                 p(c_26) = [4]                           
                 p(c_27) = [1]                           
                 p(c_28) = [1] x1 + [2]                  
                 p(c_29) = [2]                           
                 p(c_30) = [1]                           
                 p(c_31) = [1]                           
                 p(c_32) = [0]                           
                 p(c_33) = [1]                           
                 p(c_34) = [4] x1 + [1] x2 + [1]         
                 p(c_35) = [1]                           
                 p(c_36) = [4]                           
                 p(c_37) = [1] x1 + [0]                  
          
          Following rules are strictly oriented:
          eq#(l1,l2) = [1] l2 + [3]      
                     > [1] l2 + [2]      
                     = c_23(eq#1#(l1,l2))
          
          
          Following rules are (at-least) weakly oriented:
                    eq#1#(dd(x,xs),l2) =  [1] l2 + [1]                   
                                       >= [1] l2 + [1]                   
                                       =  c_24(eq#3#(l2,x,xs))           
          
                  eq#3#(dd(y,ys),x,xs) =  [1] y + [1] ys + [5]           
                                       >= [1] ys + [5]                   
                                       =  c_28(eq#(xs,ys))               
          
                               nub#(l) =  [1] l + [4]                    
                                       >= [1] l + [0]                    
                                       =  nub#1#(l)                      
          
                      nub#1#(dd(x,xs)) =  [1] x + [1] xs + [4]           
                                       >= [1] xs + [4]                   
                                       =  nub#(remove(x,xs))             
          
                      nub#1#(dd(x,xs)) =  [1] x + [1] xs + [4]           
                                       >= [1] xs + [2]                   
                                       =  remove#(x,xs)                  
          
                          remove#(x,l) =  [1] l + [2]                    
                                       >= [1] l + [0]                    
                                       =  remove#1#(l,x)                 
          
                 remove#1#(dd(y,ys),x) =  [1] y + [1] ys + [4]           
                                       >= [1] y + [3]                    
                                       =  eq#(x,y)                       
          
                 remove#1#(dd(y,ys),x) =  [1] y + [1] ys + [4]           
                                       >= [1] ys + [4]                   
                                       =  remove#2#(eq(x,y),x,y,ys)      
          
            remove#2#(#false(),x,y,ys) =  [1] ys + [4]                   
                                       >= [1] ys + [2]                   
                                       =  remove#(x,ys)                  
          
             remove#2#(#true(),x,y,ys) =  [1] ys + [4]                   
                                       >= [1] ys + [2]                   
                                       =  remove#(x,ys)                  
          
               #and(#false(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#false(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#true(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                 #and(#true(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                        #eq(#0(),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                     #eq(#0(),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#0(),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                       #eq(#0(),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#neg(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#neg(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                  #eq(#neg(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#pos(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                       #eq(#s(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(#s(x),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
          #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #and(#eq(x'1,y'1),#eq(x'2,y'2))
          
                #eq(dd(x'1,x'2),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #eq(nil(),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(nil(),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                           #equal(x,y) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                              and(x,y) =  [1] x + [1] y + [0]            
                                       >= [1] x + [1] y + [0]            
                                       =  #and(x,y)                      
          
                             eq(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#1(l1,l2)                    
          
                     eq#1(dd(x,xs),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#3(l2,x,xs)                  
          
                        eq#1(nil(),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#2(l2)                       
          
                        eq#2(dd(y,ys)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           eq#2(nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                   eq#3(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  and(#equal(x,y),eq(xs,ys))     
          
                      eq#3(nil(),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           remove(x,l) =  [1] l + [0]                    
                                       >= [1] l + [0]                    
                                       =  remove#1(l,x)                  
          
                  remove#1(dd(y,ys),x) =  [1] y + [1] ys + [4]           
                                       >= [1] y + [1] ys + [4]           
                                       =  remove#2(eq(x,y),x,y,ys)       
          
                     remove#1(nil(),x) =  [0]                            
                                       >= [0]                            
                                       =  nil()                          
          
             remove#2(#false(),x,y,ys) =  [1] y + [1] ys + [4]           
                                       >= [1] y + [1] ys + [4]           
                                       =  dd(y,remove(x,ys))             
          
              remove#2(#true(),x,y,ys) =  [1] y + [1] ys + [4]           
                                       >= [1] ys + [0]                   
                                       =  remove(x,ys)                   
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
**** Step 7.b:1.b:1.a:5: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            eq#(l1,l2) -> c_23(eq#1#(l1,l2))
            eq#1#(dd(x,xs),l2) -> c_24(eq#3#(l2,x,xs))
            eq#3#(dd(y,ys),x,xs) -> c_28(eq#(xs,ys))
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/1,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

**** Step 7.b:1.b:1.b:1: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
        - Weak DPs:
            eq#(l1,l2) -> eq#1#(l1,l2)
            eq#1#(dd(x,xs),l2) -> eq#3#(l2,x,xs)
            eq#3#(dd(y,ys),x,xs) -> #equal#(x,y)
            eq#3#(dd(y,ys),x,xs) -> eq#(xs,ys)
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_10) = {1},
            uargs(c_14) = {1},
            uargs(c_16) = {1},
            uargs(c_17) = {1,2},
            uargs(c_21) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                  
                 p(#and) = [1] x1 + [1] x2 + [0]
                  p(#eq) = [0]                  
               p(#equal) = [0]                  
               p(#false) = [0]                  
                 p(#neg) = [1] x1 + [0]         
                 p(#pos) = [0]                  
                   p(#s) = [1] x1 + [0]         
                p(#true) = [0]                  
                  p(and) = [1] x1 + [1] x2 + [0]
                   p(dd) = [1] x2 + [0]         
                   p(eq) = [0]                  
                 p(eq#1) = [0]                  
                 p(eq#2) = [0]                  
                 p(eq#3) = [0]                  
                  p(nil) = [0]                  
                  p(nub) = [0]                  
                p(nub#1) = [0]                  
               p(remove) = [0]                  
             p(remove#1) = [0]                  
             p(remove#2) = [1] x1 + [0]         
                p(#and#) = [0]                  
                 p(#eq#) = [0]                  
              p(#equal#) = [1]                  
                 p(and#) = [0]                  
                  p(eq#) = [1]                  
                p(eq#1#) = [1]                  
                p(eq#2#) = [0]                  
                p(eq#3#) = [1]                  
                 p(nub#) = [1] x1 + [1]         
               p(nub#1#) = [1]                  
              p(remove#) = [1]                  
            p(remove#1#) = [1]                  
            p(remove#2#) = [1] x1 + [1]         
                  p(c_1) = [0]                  
                  p(c_2) = [0]                  
                  p(c_3) = [0]                  
                  p(c_4) = [0]                  
                  p(c_5) = [0]                  
                  p(c_6) = [0]                  
                  p(c_7) = [0]                  
                  p(c_8) = [0]                  
                  p(c_9) = [0]                  
                 p(c_10) = [1] x1 + [0]         
                 p(c_11) = [0]                  
                 p(c_12) = [0]                  
                 p(c_13) = [0]                  
                 p(c_14) = [1] x1 + [0]         
                 p(c_15) = [0]                  
                 p(c_16) = [1] x1 + [0]         
                 p(c_17) = [1] x1 + [1] x2 + [0]
                 p(c_18) = [0]                  
                 p(c_19) = [0]                  
                 p(c_20) = [0]                  
                 p(c_21) = [1] x1 + [0]         
                 p(c_22) = [0]                  
                 p(c_23) = [0]                  
                 p(c_24) = [0]                  
                 p(c_25) = [0]                  
                 p(c_26) = [0]                  
                 p(c_27) = [0]                  
                 p(c_28) = [0]                  
                 p(c_29) = [0]                  
                 p(c_30) = [0]                  
                 p(c_31) = [0]                  
                 p(c_32) = [0]                  
                 p(c_33) = [0]                  
                 p(c_34) = [0]                  
                 p(c_35) = [0]                  
                 p(c_36) = [0]                  
                 p(c_37) = [0]                  
          
          Following rules are strictly oriented:
          #equal#(x,y) = [1]            
                       > [0]            
                       = c_21(#eq#(x,y))
          
          
          Following rules are (at-least) weakly oriented:
                  #eq#(#neg(x),#neg(y)) =  [0]                              
                                        >= [0]                              
                                        =  c_10(#eq#(x,y))                  
          
                  #eq#(#pos(x),#pos(y)) =  [0]                              
                                        >= [0]                              
                                        =  c_14(#eq#(x,y))                  
          
                      #eq#(#s(x),#s(y)) =  [0]                              
                                        >= [0]                              
                                        =  c_16(#eq#(x,y))                  
          
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                              
                                        >= [0]                              
                                        =  c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          
                             eq#(l1,l2) =  [1]                              
                                        >= [1]                              
                                        =  eq#1#(l1,l2)                     
          
                     eq#1#(dd(x,xs),l2) =  [1]                              
                                        >= [1]                              
                                        =  eq#3#(l2,x,xs)                   
          
                   eq#3#(dd(y,ys),x,xs) =  [1]                              
                                        >= [1]                              
                                        =  #equal#(x,y)                     
          
                   eq#3#(dd(y,ys),x,xs) =  [1]                              
                                        >= [1]                              
                                        =  eq#(xs,ys)                       
          
                                nub#(l) =  [1] l + [1]                      
                                        >= [1]                              
                                        =  nub#1#(l)                        
          
                       nub#1#(dd(x,xs)) =  [1]                              
                                        >= [1]                              
                                        =  nub#(remove(x,xs))               
          
                       nub#1#(dd(x,xs)) =  [1]                              
                                        >= [1]                              
                                        =  remove#(x,xs)                    
          
                           remove#(x,l) =  [1]                              
                                        >= [1]                              
                                        =  remove#1#(l,x)                   
          
                  remove#1#(dd(y,ys),x) =  [1]                              
                                        >= [1]                              
                                        =  eq#(x,y)                         
          
                  remove#1#(dd(y,ys),x) =  [1]                              
                                        >= [1]                              
                                        =  remove#2#(eq(x,y),x,y,ys)        
          
             remove#2#(#false(),x,y,ys) =  [1]                              
                                        >= [1]                              
                                        =  remove#(x,ys)                    
          
              remove#2#(#true(),x,y,ys) =  [1]                              
                                        >= [1]                              
                                        =  remove#(x,ys)                    
          
                #and(#false(),#false()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                 #and(#false(),#true()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                 #and(#true(),#false()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                  #and(#true(),#true()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                         #eq(#0(),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                      #eq(#0(),#neg(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                      #eq(#0(),#pos(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                        #eq(#0(),#s(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                      #eq(#neg(x),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                   #eq(#neg(x),#neg(y)) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
                   #eq(#neg(x),#pos(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                      #eq(#pos(x),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                   #eq(#pos(x),#neg(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                   #eq(#pos(x),#pos(y)) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
                        #eq(#s(x),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                       #eq(#s(x),#s(y)) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
           #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                              
                                        >= [0]                              
                                        =  #and(#eq(x'1,y'1),#eq(x'2,y'2))  
          
                 #eq(dd(x'1,x'2),nil()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                 #eq(nil(),dd(y'1,y'2)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                       #eq(nil(),nil()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                            #equal(x,y) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
                               and(x,y) =  [1] x + [1] y + [0]              
                                        >= [1] x + [1] y + [0]              
                                        =  #and(x,y)                        
          
                              eq(l1,l2) =  [0]                              
                                        >= [0]                              
                                        =  eq#1(l1,l2)                      
          
                      eq#1(dd(x,xs),l2) =  [0]                              
                                        >= [0]                              
                                        =  eq#3(l2,x,xs)                    
          
                         eq#1(nil(),l2) =  [0]                              
                                        >= [0]                              
                                        =  eq#2(l2)                         
          
                         eq#2(dd(y,ys)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                            eq#2(nil()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                    eq#3(dd(y,ys),x,xs) =  [0]                              
                                        >= [0]                              
                                        =  and(#equal(x,y),eq(xs,ys))       
          
                       eq#3(nil(),x,xs) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                            remove(x,l) =  [0]                              
                                        >= [0]                              
                                        =  remove#1(l,x)                    
          
                   remove#1(dd(y,ys),x) =  [0]                              
                                        >= [0]                              
                                        =  remove#2(eq(x,y),x,y,ys)         
          
                      remove#1(nil(),x) =  [0]                              
                                        >= [0]                              
                                        =  nil()                            
          
              remove#2(#false(),x,y,ys) =  [0]                              
                                        >= [0]                              
                                        =  dd(y,remove(x,ys))               
          
               remove#2(#true(),x,y,ys) =  [0]                              
                                        >= [0]                              
                                        =  remove(x,ys)                     
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
**** Step 7.b:1.b:1.b:2: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
        - Weak DPs:
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> eq#1#(l1,l2)
            eq#1#(dd(x,xs),l2) -> eq#3#(l2,x,xs)
            eq#3#(dd(y,ys),x,xs) -> #equal#(x,y)
            eq#3#(dd(y,ys),x,xs) -> eq#(xs,ys)
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_10) = {1},
            uargs(c_14) = {1},
            uargs(c_16) = {1},
            uargs(c_17) = {1,2},
            uargs(c_21) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                                    
                 p(#and) = [1] x1 + [1] x2 + [0]                  
                  p(#eq) = [0]                                    
               p(#equal) = [0]                                    
               p(#false) = [0]                                    
                 p(#neg) = [1] x1 + [2]                           
                 p(#pos) = [1] x1 + [0]                           
                   p(#s) = [1] x1 + [0]                           
                p(#true) = [0]                                    
                  p(and) = [1] x1 + [1] x2 + [0]                  
                   p(dd) = [1] x1 + [1] x2 + [0]                  
                   p(eq) = [0]                                    
                 p(eq#1) = [0]                                    
                 p(eq#2) = [0]                                    
                 p(eq#3) = [0]                                    
                  p(nil) = [0]                                    
                  p(nub) = [1] x1 + [0]                           
                p(nub#1) = [1]                                    
               p(remove) = [1] x1 + [1] x2 + [0]                  
             p(remove#1) = [1] x1 + [1] x2 + [0]                  
             p(remove#2) = [1] x1 + [1] x2 + [1] x3 + [1] x4 + [0]
                p(#and#) = [4] x1 + [0]                           
                 p(#eq#) = [1] x1 + [0]                           
              p(#equal#) = [1] x1 + [1] x2 + [0]                  
                 p(and#) = [1] x1 + [2]                           
                  p(eq#) = [1] x1 + [1] x2 + [0]                  
                p(eq#1#) = [1] x1 + [1] x2 + [0]                  
                p(eq#2#) = [2] x1 + [1]                           
                p(eq#3#) = [1] x1 + [1] x2 + [1] x3 + [0]         
                 p(nub#) = [1] x1 + [1]                           
               p(nub#1#) = [1] x1 + [1]                           
              p(remove#) = [1] x1 + [1] x2 + [0]                  
            p(remove#1#) = [1] x1 + [1] x2 + [0]                  
            p(remove#2#) = [1] x1 + [1] x2 + [1] x3 + [1] x4 + [0]
                  p(c_1) = [1]                                    
                  p(c_2) = [0]                                    
                  p(c_3) = [1]                                    
                  p(c_4) = [0]                                    
                  p(c_5) = [4]                                    
                  p(c_6) = [1]                                    
                  p(c_7) = [0]                                    
                  p(c_8) = [4]                                    
                  p(c_9) = [0]                                    
                 p(c_10) = [1] x1 + [0]                           
                 p(c_11) = [4]                                    
                 p(c_12) = [1]                                    
                 p(c_13) = [1]                                    
                 p(c_14) = [1] x1 + [0]                           
                 p(c_15) = [1]                                    
                 p(c_16) = [1] x1 + [0]                           
                 p(c_17) = [1] x1 + [1] x2 + [0]                  
                 p(c_18) = [1]                                    
                 p(c_19) = [0]                                    
                 p(c_20) = [2]                                    
                 p(c_21) = [1] x1 + [0]                           
                 p(c_22) = [4] x1 + [0]                           
                 p(c_23) = [4] x1 + [0]                           
                 p(c_24) = [2] x1 + [0]                           
                 p(c_25) = [1]                                    
                 p(c_26) = [0]                                    
                 p(c_27) = [0]                                    
                 p(c_28) = [1] x2 + [0]                           
                 p(c_29) = [1]                                    
                 p(c_30) = [4] x1 + [1]                           
                 p(c_31) = [2] x1 + [1] x2 + [4]                  
                 p(c_32) = [4]                                    
                 p(c_33) = [1] x1 + [1]                           
                 p(c_34) = [0]                                    
                 p(c_35) = [0]                                    
                 p(c_36) = [1] x1 + [0]                           
                 p(c_37) = [0]                                    
          
          Following rules are strictly oriented:
          #eq#(#neg(x),#neg(y)) = [1] x + [2]    
                                > [1] x + [0]    
                                = c_10(#eq#(x,y))
          
          
          Following rules are (at-least) weakly oriented:
                  #eq#(#pos(x),#pos(y)) =  [1] x + [0]                          
                                        >= [1] x + [0]                          
                                        =  c_14(#eq#(x,y))                      
          
                      #eq#(#s(x),#s(y)) =  [1] x + [0]                          
                                        >= [1] x + [0]                          
                                        =  c_16(#eq#(x,y))                      
          
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) =  [1] x'1 + [1] x'2 + [0]              
                                        >= [1] x'1 + [1] x'2 + [0]              
                                        =  c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))    
          
                           #equal#(x,y) =  [1] x + [1] y + [0]                  
                                        >= [1] x + [0]                          
                                        =  c_21(#eq#(x,y))                      
          
                             eq#(l1,l2) =  [1] l1 + [1] l2 + [0]                
                                        >= [1] l1 + [1] l2 + [0]                
                                        =  eq#1#(l1,l2)                         
          
                     eq#1#(dd(x,xs),l2) =  [1] l2 + [1] x + [1] xs + [0]        
                                        >= [1] l2 + [1] x + [1] xs + [0]        
                                        =  eq#3#(l2,x,xs)                       
          
                   eq#3#(dd(y,ys),x,xs) =  [1] x + [1] xs + [1] y + [1] ys + [0]
                                        >= [1] x + [1] y + [0]                  
                                        =  #equal#(x,y)                         
          
                   eq#3#(dd(y,ys),x,xs) =  [1] x + [1] xs + [1] y + [1] ys + [0]
                                        >= [1] xs + [1] ys + [0]                
                                        =  eq#(xs,ys)                           
          
                                nub#(l) =  [1] l + [1]                          
                                        >= [1] l + [1]                          
                                        =  nub#1#(l)                            
          
                       nub#1#(dd(x,xs)) =  [1] x + [1] xs + [1]                 
                                        >= [1] x + [1] xs + [1]                 
                                        =  nub#(remove(x,xs))                   
          
                       nub#1#(dd(x,xs)) =  [1] x + [1] xs + [1]                 
                                        >= [1] x + [1] xs + [0]                 
                                        =  remove#(x,xs)                        
          
                           remove#(x,l) =  [1] l + [1] x + [0]                  
                                        >= [1] l + [1] x + [0]                  
                                        =  remove#1#(l,x)                       
          
                  remove#1#(dd(y,ys),x) =  [1] x + [1] y + [1] ys + [0]         
                                        >= [1] x + [1] y + [0]                  
                                        =  eq#(x,y)                             
          
                  remove#1#(dd(y,ys),x) =  [1] x + [1] y + [1] ys + [0]         
                                        >= [1] x + [1] y + [1] ys + [0]         
                                        =  remove#2#(eq(x,y),x,y,ys)            
          
             remove#2#(#false(),x,y,ys) =  [1] x + [1] y + [1] ys + [0]         
                                        >= [1] x + [1] ys + [0]                 
                                        =  remove#(x,ys)                        
          
              remove#2#(#true(),x,y,ys) =  [1] x + [1] y + [1] ys + [0]         
                                        >= [1] x + [1] ys + [0]                 
                                        =  remove#(x,ys)                        
          
                #and(#false(),#false()) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                 #and(#false(),#true()) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                 #and(#true(),#false()) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                  #and(#true(),#true()) =  [0]                                  
                                        >= [0]                                  
                                        =  #true()                              
          
                         #eq(#0(),#0()) =  [0]                                  
                                        >= [0]                                  
                                        =  #true()                              
          
                      #eq(#0(),#neg(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                      #eq(#0(),#pos(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                        #eq(#0(),#s(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                      #eq(#neg(x),#0()) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                   #eq(#neg(x),#neg(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #eq(x,y)                             
          
                   #eq(#neg(x),#pos(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                      #eq(#pos(x),#0()) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                   #eq(#pos(x),#neg(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                   #eq(#pos(x),#pos(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #eq(x,y)                             
          
                        #eq(#s(x),#0()) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                       #eq(#s(x),#s(y)) =  [0]                                  
                                        >= [0]                                  
                                        =  #eq(x,y)                             
          
           #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                                  
                                        >= [0]                                  
                                        =  #and(#eq(x'1,y'1),#eq(x'2,y'2))      
          
                 #eq(dd(x'1,x'2),nil()) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                 #eq(nil(),dd(y'1,y'2)) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                       #eq(nil(),nil()) =  [0]                                  
                                        >= [0]                                  
                                        =  #true()                              
          
                            #equal(x,y) =  [0]                                  
                                        >= [0]                                  
                                        =  #eq(x,y)                             
          
                               and(x,y) =  [1] x + [1] y + [0]                  
                                        >= [1] x + [1] y + [0]                  
                                        =  #and(x,y)                            
          
                              eq(l1,l2) =  [0]                                  
                                        >= [0]                                  
                                        =  eq#1(l1,l2)                          
          
                      eq#1(dd(x,xs),l2) =  [0]                                  
                                        >= [0]                                  
                                        =  eq#3(l2,x,xs)                        
          
                         eq#1(nil(),l2) =  [0]                                  
                                        >= [0]                                  
                                        =  eq#2(l2)                             
          
                         eq#2(dd(y,ys)) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                            eq#2(nil()) =  [0]                                  
                                        >= [0]                                  
                                        =  #true()                              
          
                    eq#3(dd(y,ys),x,xs) =  [0]                                  
                                        >= [0]                                  
                                        =  and(#equal(x,y),eq(xs,ys))           
          
                       eq#3(nil(),x,xs) =  [0]                                  
                                        >= [0]                                  
                                        =  #false()                             
          
                            remove(x,l) =  [1] l + [1] x + [0]                  
                                        >= [1] l + [1] x + [0]                  
                                        =  remove#1(l,x)                        
          
                   remove#1(dd(y,ys),x) =  [1] x + [1] y + [1] ys + [0]         
                                        >= [1] x + [1] y + [1] ys + [0]         
                                        =  remove#2(eq(x,y),x,y,ys)             
          
                      remove#1(nil(),x) =  [1] x + [0]                          
                                        >= [0]                                  
                                        =  nil()                                
          
              remove#2(#false(),x,y,ys) =  [1] x + [1] y + [1] ys + [0]         
                                        >= [1] x + [1] y + [1] ys + [0]         
                                        =  dd(y,remove(x,ys))                   
          
               remove#2(#true(),x,y,ys) =  [1] x + [1] y + [1] ys + [0]         
                                        >= [1] x + [1] ys + [0]                 
                                        =  remove(x,ys)                         
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
**** Step 7.b:1.b:1.b:3: NaturalMI WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
        - Weak DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> eq#1#(l1,l2)
            eq#1#(dd(x,xs),l2) -> eq#3#(l2,x,xs)
            eq#3#(dd(y,ys),x,xs) -> #equal#(x,y)
            eq#3#(dd(y,ys),x,xs) -> eq#(xs,ys)
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        NaturalMI {miDimension = 1, miDegree = 1, miKind = Algebraic, uargs = UArgs, urules = URules, selector = Just any strict-rules}
    + Details:
        We apply a matrix interpretation of kind constructor based matrix interpretation:
        The following argument positions are considered usable:
          uargs(c_10) = {1},
          uargs(c_14) = {1},
          uargs(c_16) = {1},
          uargs(c_17) = {1,2},
          uargs(c_21) = {1}
        
        Following symbols are considered usable:
          {remove,remove#1,remove#2,#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#,remove#,remove#1#
          ,remove#2#}
        TcT has computed the following interpretation:
                 p(#0) = [4]                           
               p(#and) = [1] x1 + [4] x2 + [0]         
                p(#eq) = [3] x2 + [1]                  
             p(#equal) = [2] x1 + [0]                  
             p(#false) = [0]                           
               p(#neg) = [1] x1 + [4]                  
               p(#pos) = [1] x1 + [0]                  
                 p(#s) = [1] x1 + [3]                  
              p(#true) = [2]                           
                p(and) = [4] x1 + [3] x2 + [2]         
                 p(dd) = [1] x1 + [1] x2 + [1]         
                 p(eq) = [5] x2 + [0]                  
               p(eq#1) = [4] x1 + [1] x2 + [0]         
               p(eq#2) = [0]                           
               p(eq#3) = [1]                           
                p(nil) = [2]                           
                p(nub) = [2]                           
              p(nub#1) = [1]                           
             p(remove) = [1] x2 + [0]                  
           p(remove#1) = [1] x1 + [0]                  
           p(remove#2) = [1] x3 + [1] x4 + [1]         
              p(#and#) = [1] x2 + [1]                  
               p(#eq#) = [2] x2 + [0]                  
            p(#equal#) = [4] x1 + [4] x2 + [0]         
               p(and#) = [2] x1 + [1]                  
                p(eq#) = [4] x1 + [4] x2 + [0]         
              p(eq#1#) = [4] x1 + [4] x2 + [0]         
              p(eq#2#) = [1]                           
              p(eq#3#) = [4] x1 + [4] x2 + [4] x3 + [4]
               p(nub#) = [4] x1 + [5]                  
             p(nub#1#) = [4] x1 + [4]                  
            p(remove#) = [4] x1 + [4] x2 + [0]         
          p(remove#1#) = [4] x1 + [4] x2 + [0]         
          p(remove#2#) = [4] x2 + [1] x3 + [4] x4 + [4]
                p(c_1) = [2]                           
                p(c_2) = [4]                           
                p(c_3) = [4]                           
                p(c_4) = [1]                           
                p(c_5) = [1]                           
                p(c_6) = [0]                           
                p(c_7) = [4]                           
                p(c_8) = [0]                           
                p(c_9) = [0]                           
               p(c_10) = [1] x1 + [0]                  
               p(c_11) = [1]                           
               p(c_12) = [0]                           
               p(c_13) = [0]                           
               p(c_14) = [1] x1 + [0]                  
               p(c_15) = [1]                           
               p(c_16) = [1] x1 + [3]                  
               p(c_17) = [1] x1 + [1] x2 + [2]         
               p(c_18) = [1]                           
               p(c_19) = [1]                           
               p(c_20) = [0]                           
               p(c_21) = [1] x1 + [0]                  
               p(c_22) = [0]                           
               p(c_23) = [1]                           
               p(c_24) = [4] x1 + [2]                  
               p(c_25) = [4] x1 + [2]                  
               p(c_26) = [1]                           
               p(c_27) = [0]                           
               p(c_28) = [1] x1 + [2] x2 + [0]         
               p(c_29) = [0]                           
               p(c_30) = [2]                           
               p(c_31) = [1] x1 + [2]                  
               p(c_32) = [4]                           
               p(c_33) = [0]                           
               p(c_34) = [2] x2 + [2]                  
               p(c_35) = [2]                           
               p(c_36) = [2]                           
               p(c_37) = [1] x1 + [0]                  
        
        Following rules are strictly oriented:
        #eq#(#s(x),#s(y)) = [2] y + [6]    
                          > [2] y + [3]    
                          = c_16(#eq#(x,y))
        
        
        Following rules are (at-least) weakly oriented:
                #eq#(#neg(x),#neg(y)) =  [2] y + [8]                          
                                      >= [2] y + [0]                          
                                      =  c_10(#eq#(x,y))                      
        
                #eq#(#pos(x),#pos(y)) =  [2] y + [0]                          
                                      >= [2] y + [0]                          
                                      =  c_14(#eq#(x,y))                      
        
        #eq#(dd(x'1,x'2),dd(y'1,y'2)) =  [2] y'1 + [2] y'2 + [2]              
                                      >= [2] y'1 + [2] y'2 + [2]              
                                      =  c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))    
        
                         #equal#(x,y) =  [4] x + [4] y + [0]                  
                                      >= [2] y + [0]                          
                                      =  c_21(#eq#(x,y))                      
        
                           eq#(l1,l2) =  [4] l1 + [4] l2 + [0]                
                                      >= [4] l1 + [4] l2 + [0]                
                                      =  eq#1#(l1,l2)                         
        
                   eq#1#(dd(x,xs),l2) =  [4] l2 + [4] x + [4] xs + [4]        
                                      >= [4] l2 + [4] x + [4] xs + [4]        
                                      =  eq#3#(l2,x,xs)                       
        
                 eq#3#(dd(y,ys),x,xs) =  [4] x + [4] xs + [4] y + [4] ys + [8]
                                      >= [4] x + [4] y + [0]                  
                                      =  #equal#(x,y)                         
        
                 eq#3#(dd(y,ys),x,xs) =  [4] x + [4] xs + [4] y + [4] ys + [8]
                                      >= [4] xs + [4] ys + [0]                
                                      =  eq#(xs,ys)                           
        
                              nub#(l) =  [4] l + [5]                          
                                      >= [4] l + [4]                          
                                      =  nub#1#(l)                            
        
                     nub#1#(dd(x,xs)) =  [4] x + [4] xs + [8]                 
                                      >= [4] xs + [5]                         
                                      =  nub#(remove(x,xs))                   
        
                     nub#1#(dd(x,xs)) =  [4] x + [4] xs + [8]                 
                                      >= [4] x + [4] xs + [0]                 
                                      =  remove#(x,xs)                        
        
                         remove#(x,l) =  [4] l + [4] x + [0]                  
                                      >= [4] l + [4] x + [0]                  
                                      =  remove#1#(l,x)                       
        
                remove#1#(dd(y,ys),x) =  [4] x + [4] y + [4] ys + [4]         
                                      >= [4] x + [4] y + [0]                  
                                      =  eq#(x,y)                             
        
                remove#1#(dd(y,ys),x) =  [4] x + [4] y + [4] ys + [4]         
                                      >= [4] x + [1] y + [4] ys + [4]         
                                      =  remove#2#(eq(x,y),x,y,ys)            
        
           remove#2#(#false(),x,y,ys) =  [4] x + [1] y + [4] ys + [4]         
                                      >= [4] x + [4] ys + [0]                 
                                      =  remove#(x,ys)                        
        
            remove#2#(#true(),x,y,ys) =  [4] x + [1] y + [4] ys + [4]         
                                      >= [4] x + [4] ys + [0]                 
                                      =  remove#(x,ys)                        
        
                          remove(x,l) =  [1] l + [0]                          
                                      >= [1] l + [0]                          
                                      =  remove#1(l,x)                        
        
                 remove#1(dd(y,ys),x) =  [1] y + [1] ys + [1]                 
                                      >= [1] y + [1] ys + [1]                 
                                      =  remove#2(eq(x,y),x,y,ys)             
        
                    remove#1(nil(),x) =  [2]                                  
                                      >= [2]                                  
                                      =  nil()                                
        
            remove#2(#false(),x,y,ys) =  [1] y + [1] ys + [1]                 
                                      >= [1] y + [1] ys + [1]                 
                                      =  dd(y,remove(x,ys))                   
        
             remove#2(#true(),x,y,ys) =  [1] y + [1] ys + [1]                 
                                      >= [1] ys + [0]                         
                                      =  remove(x,ys)                         
        
**** Step 7.b:1.b:1.b:4: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
        - Weak DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> eq#1#(l1,l2)
            eq#1#(dd(x,xs),l2) -> eq#3#(l2,x,xs)
            eq#3#(dd(y,ys),x,xs) -> #equal#(x,y)
            eq#3#(dd(y,ys),x,xs) -> eq#(xs,ys)
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_10) = {1},
            uargs(c_14) = {1},
            uargs(c_16) = {1},
            uargs(c_17) = {1,2},
            uargs(c_21) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [2]                           
                 p(#and) = [1] x1 + [1] x2 + [0]         
                  p(#eq) = [0]                           
               p(#equal) = [0]                           
               p(#false) = [0]                           
                 p(#neg) = [1] x1 + [0]                  
                 p(#pos) = [1] x1 + [0]                  
                   p(#s) = [1] x1 + [4]                  
                p(#true) = [0]                           
                  p(and) = [1] x1 + [1] x2 + [0]         
                   p(dd) = [1] x1 + [1] x2 + [4]         
                   p(eq) = [0]                           
                 p(eq#1) = [0]                           
                 p(eq#2) = [0]                           
                 p(eq#3) = [0]                           
                  p(nil) = [4]                           
                  p(nub) = [0]                           
                p(nub#1) = [0]                           
               p(remove) = [1] x2 + [0]                  
             p(remove#1) = [1] x1 + [0]                  
             p(remove#2) = [1] x1 + [1] x3 + [1] x4 + [4]
                p(#and#) = [0]                           
                 p(#eq#) = [1] x2 + [0]                  
              p(#equal#) = [1] x2 + [4]                  
                 p(and#) = [0]                           
                  p(eq#) = [1] x2 + [0]                  
                p(eq#1#) = [1] x2 + [0]                  
                p(eq#2#) = [0]                           
                p(eq#3#) = [1] x1 + [0]                  
                 p(nub#) = [1] x1 + [4]                  
               p(nub#1#) = [1] x1 + [2]                  
              p(remove#) = [1] x2 + [2]                  
            p(remove#1#) = [1] x1 + [1]                  
            p(remove#2#) = [1] x1 + [1] x4 + [5]         
                  p(c_1) = [0]                           
                  p(c_2) = [0]                           
                  p(c_3) = [1]                           
                  p(c_4) = [2]                           
                  p(c_5) = [1]                           
                  p(c_6) = [0]                           
                  p(c_7) = [1]                           
                  p(c_8) = [0]                           
                  p(c_9) = [1]                           
                 p(c_10) = [1] x1 + [0]                  
                 p(c_11) = [1]                           
                 p(c_12) = [1]                           
                 p(c_13) = [4]                           
                 p(c_14) = [1] x1 + [0]                  
                 p(c_15) = [1]                           
                 p(c_16) = [1] x1 + [4]                  
                 p(c_17) = [1] x1 + [1] x2 + [1]         
                 p(c_18) = [4]                           
                 p(c_19) = [1]                           
                 p(c_20) = [2]                           
                 p(c_21) = [1] x1 + [0]                  
                 p(c_22) = [2] x1 + [0]                  
                 p(c_23) = [1] x1 + [1]                  
                 p(c_24) = [1] x1 + [1]                  
                 p(c_25) = [4] x1 + [2]                  
                 p(c_26) = [4]                           
                 p(c_27) = [0]                           
                 p(c_28) = [4] x1 + [1] x2 + [1]         
                 p(c_29) = [1]                           
                 p(c_30) = [2] x1 + [0]                  
                 p(c_31) = [4] x2 + [1]                  
                 p(c_32) = [2]                           
                 p(c_33) = [2]                           
                 p(c_34) = [1] x1 + [1] x2 + [4]         
                 p(c_35) = [1]                           
                 p(c_36) = [1] x1 + [0]                  
                 p(c_37) = [1]                           
          
          Following rules are strictly oriented:
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) = [1] y'1 + [1] y'2 + [4]          
                                        > [1] y'1 + [1] y'2 + [1]          
                                        = c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          
          
          Following rules are (at-least) weakly oriented:
                 #eq#(#neg(x),#neg(y)) =  [1] y + [0]                    
                                       >= [1] y + [0]                    
                                       =  c_10(#eq#(x,y))                
          
                 #eq#(#pos(x),#pos(y)) =  [1] y + [0]                    
                                       >= [1] y + [0]                    
                                       =  c_14(#eq#(x,y))                
          
                     #eq#(#s(x),#s(y)) =  [1] y + [4]                    
                                       >= [1] y + [4]                    
                                       =  c_16(#eq#(x,y))                
          
                          #equal#(x,y) =  [1] y + [4]                    
                                       >= [1] y + [0]                    
                                       =  c_21(#eq#(x,y))                
          
                            eq#(l1,l2) =  [1] l2 + [0]                   
                                       >= [1] l2 + [0]                   
                                       =  eq#1#(l1,l2)                   
          
                    eq#1#(dd(x,xs),l2) =  [1] l2 + [0]                   
                                       >= [1] l2 + [0]                   
                                       =  eq#3#(l2,x,xs)                 
          
                  eq#3#(dd(y,ys),x,xs) =  [1] y + [1] ys + [4]           
                                       >= [1] y + [4]                    
                                       =  #equal#(x,y)                   
          
                  eq#3#(dd(y,ys),x,xs) =  [1] y + [1] ys + [4]           
                                       >= [1] ys + [0]                   
                                       =  eq#(xs,ys)                     
          
                               nub#(l) =  [1] l + [4]                    
                                       >= [1] l + [2]                    
                                       =  nub#1#(l)                      
          
                      nub#1#(dd(x,xs)) =  [1] x + [1] xs + [6]           
                                       >= [1] xs + [4]                   
                                       =  nub#(remove(x,xs))             
          
                      nub#1#(dd(x,xs)) =  [1] x + [1] xs + [6]           
                                       >= [1] xs + [2]                   
                                       =  remove#(x,xs)                  
          
                          remove#(x,l) =  [1] l + [2]                    
                                       >= [1] l + [1]                    
                                       =  remove#1#(l,x)                 
          
                 remove#1#(dd(y,ys),x) =  [1] y + [1] ys + [5]           
                                       >= [1] y + [0]                    
                                       =  eq#(x,y)                       
          
                 remove#1#(dd(y,ys),x) =  [1] y + [1] ys + [5]           
                                       >= [1] ys + [5]                   
                                       =  remove#2#(eq(x,y),x,y,ys)      
          
            remove#2#(#false(),x,y,ys) =  [1] ys + [5]                   
                                       >= [1] ys + [2]                   
                                       =  remove#(x,ys)                  
          
             remove#2#(#true(),x,y,ys) =  [1] ys + [5]                   
                                       >= [1] ys + [2]                   
                                       =  remove#(x,ys)                  
          
               #and(#false(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#false(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #and(#true(),#false()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                 #and(#true(),#true()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                        #eq(#0(),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                     #eq(#0(),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#0(),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                       #eq(#0(),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#neg(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#neg(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                  #eq(#neg(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                     #eq(#pos(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#neg(y)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                  #eq(#pos(x),#pos(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                       #eq(#s(x),#0()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(#s(x),#s(y)) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
          #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #and(#eq(x'1,y'1),#eq(x'2,y'2))
          
                #eq(dd(x'1,x'2),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                #eq(nil(),dd(y'1,y'2)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                      #eq(nil(),nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                           #equal(x,y) =  [0]                            
                                       >= [0]                            
                                       =  #eq(x,y)                       
          
                              and(x,y) =  [1] x + [1] y + [0]            
                                       >= [1] x + [1] y + [0]            
                                       =  #and(x,y)                      
          
                             eq(l1,l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#1(l1,l2)                    
          
                     eq#1(dd(x,xs),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#3(l2,x,xs)                  
          
                        eq#1(nil(),l2) =  [0]                            
                                       >= [0]                            
                                       =  eq#2(l2)                       
          
                        eq#2(dd(y,ys)) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           eq#2(nil()) =  [0]                            
                                       >= [0]                            
                                       =  #true()                        
          
                   eq#3(dd(y,ys),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  and(#equal(x,y),eq(xs,ys))     
          
                      eq#3(nil(),x,xs) =  [0]                            
                                       >= [0]                            
                                       =  #false()                       
          
                           remove(x,l) =  [1] l + [0]                    
                                       >= [1] l + [0]                    
                                       =  remove#1(l,x)                  
          
                  remove#1(dd(y,ys),x) =  [1] y + [1] ys + [4]           
                                       >= [1] y + [1] ys + [4]           
                                       =  remove#2(eq(x,y),x,y,ys)       
          
                     remove#1(nil(),x) =  [4]                            
                                       >= [4]                            
                                       =  nil()                          
          
             remove#2(#false(),x,y,ys) =  [1] y + [1] ys + [4]           
                                       >= [1] y + [1] ys + [4]           
                                       =  dd(y,remove(x,ys))             
          
              remove#2(#true(),x,y,ys) =  [1] y + [1] ys + [4]           
                                       >= [1] ys + [0]                   
                                       =  remove(x,ys)                   
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
**** Step 7.b:1.b:1.b:5: WeightGap WORST_CASE(?,O(n^1))
    + Considered Problem:
        - Strict DPs:
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
        - Weak DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> eq#1#(l1,l2)
            eq#1#(dd(x,xs),l2) -> eq#3#(l2,x,xs)
            eq#3#(dd(y,ys),x,xs) -> #equal#(x,y)
            eq#3#(dd(y,ys),x,xs) -> eq#(xs,ys)
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        WeightGap {wgDimension = 1, wgDegree = 1, wgKind = Algebraic, wgUArgs = UArgs, wgOn = WgOnAny}
    + Details:
        The weightgap principle applies using the following constant growth matrix-interpretation:
          We apply a matrix interpretation of kind constructor based matrix interpretation:
          The following argument positions are considered usable:
            uargs(#and) = {1,2},
            uargs(and) = {1,2},
            uargs(dd) = {2},
            uargs(remove#2) = {1},
            uargs(nub#) = {1},
            uargs(remove#2#) = {1},
            uargs(c_10) = {1},
            uargs(c_14) = {1},
            uargs(c_16) = {1},
            uargs(c_17) = {1,2},
            uargs(c_21) = {1}
          
          Following symbols are considered usable:
            all
          TcT has computed the following interpretation:
                   p(#0) = [0]                           
                 p(#and) = [1] x1 + [1] x2 + [0]         
                  p(#eq) = [0]                           
               p(#equal) = [0]                           
               p(#false) = [0]                           
                 p(#neg) = [1] x1 + [0]                  
                 p(#pos) = [1] x1 + [4]                  
                   p(#s) = [1] x1 + [0]                  
                p(#true) = [0]                           
                  p(and) = [1] x1 + [1] x2 + [0]         
                   p(dd) = [1] x1 + [1] x2 + [0]         
                   p(eq) = [0]                           
                 p(eq#1) = [0]                           
                 p(eq#2) = [0]                           
                 p(eq#3) = [0]                           
                  p(nil) = [0]                           
                  p(nub) = [0]                           
                p(nub#1) = [0]                           
               p(remove) = [1] x2 + [0]                  
             p(remove#1) = [1] x1 + [0]                  
             p(remove#2) = [1] x1 + [1] x3 + [1] x4 + [0]
                p(#and#) = [1] x1 + [2] x2 + [0]         
                 p(#eq#) = [1] x1 + [0]                  
              p(#equal#) = [1] x1 + [0]                  
                 p(and#) = [4] x1 + [1]                  
                  p(eq#) = [1] x1 + [0]                  
                p(eq#1#) = [1] x1 + [0]                  
                p(eq#2#) = [0]                           
                p(eq#3#) = [1] x2 + [1] x3 + [0]         
                 p(nub#) = [1] x1 + [2]                  
               p(nub#1#) = [1] x1 + [2]                  
              p(remove#) = [1] x1 + [0]                  
            p(remove#1#) = [1] x2 + [0]                  
            p(remove#2#) = [1] x1 + [1] x2 + [0]         
                  p(c_1) = [0]                           
                  p(c_2) = [1]                           
                  p(c_3) = [1]                           
                  p(c_4) = [0]                           
                  p(c_5) = [0]                           
                  p(c_6) = [2]                           
                  p(c_7) = [4]                           
                  p(c_8) = [1]                           
                  p(c_9) = [1]                           
                 p(c_10) = [1] x1 + [0]                  
                 p(c_11) = [0]                           
                 p(c_12) = [0]                           
                 p(c_13) = [1]                           
                 p(c_14) = [1] x1 + [2]                  
                 p(c_15) = [0]                           
                 p(c_16) = [1] x1 + [0]                  
                 p(c_17) = [1] x1 + [1] x2 + [0]         
                 p(c_18) = [2]                           
                 p(c_19) = [0]                           
                 p(c_20) = [0]                           
                 p(c_21) = [1] x1 + [0]                  
                 p(c_22) = [4] x1 + [1]                  
                 p(c_23) = [1] x1 + [4]                  
                 p(c_24) = [1]                           
                 p(c_25) = [1] x1 + [1]                  
                 p(c_26) = [0]                           
                 p(c_27) = [1]                           
                 p(c_28) = [0]                           
                 p(c_29) = [0]                           
                 p(c_30) = [1] x1 + [4]                  
                 p(c_31) = [1] x1 + [2] x2 + [1]         
                 p(c_32) = [0]                           
                 p(c_33) = [4] x1 + [0]                  
                 p(c_34) = [1] x1 + [1]                  
                 p(c_35) = [1]                           
                 p(c_36) = [2]                           
                 p(c_37) = [1] x1 + [0]                  
          
          Following rules are strictly oriented:
          #eq#(#pos(x),#pos(y)) = [1] x + [4]    
                                > [1] x + [2]    
                                = c_14(#eq#(x,y))
          
          
          Following rules are (at-least) weakly oriented:
                  #eq#(#neg(x),#neg(y)) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  c_10(#eq#(x,y))                  
          
                      #eq#(#s(x),#s(y)) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  c_16(#eq#(x,y))                  
          
          #eq#(dd(x'1,x'2),dd(y'1,y'2)) =  [1] x'1 + [1] x'2 + [0]          
                                        >= [1] x'1 + [1] x'2 + [0]          
                                        =  c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
          
                           #equal#(x,y) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  c_21(#eq#(x,y))                  
          
                             eq#(l1,l2) =  [1] l1 + [0]                     
                                        >= [1] l1 + [0]                     
                                        =  eq#1#(l1,l2)                     
          
                     eq#1#(dd(x,xs),l2) =  [1] x + [1] xs + [0]             
                                        >= [1] x + [1] xs + [0]             
                                        =  eq#3#(l2,x,xs)                   
          
                   eq#3#(dd(y,ys),x,xs) =  [1] x + [1] xs + [0]             
                                        >= [1] x + [0]                      
                                        =  #equal#(x,y)                     
          
                   eq#3#(dd(y,ys),x,xs) =  [1] x + [1] xs + [0]             
                                        >= [1] xs + [0]                     
                                        =  eq#(xs,ys)                       
          
                                nub#(l) =  [1] l + [2]                      
                                        >= [1] l + [2]                      
                                        =  nub#1#(l)                        
          
                       nub#1#(dd(x,xs)) =  [1] x + [1] xs + [2]             
                                        >= [1] xs + [2]                     
                                        =  nub#(remove(x,xs))               
          
                       nub#1#(dd(x,xs)) =  [1] x + [1] xs + [2]             
                                        >= [1] x + [0]                      
                                        =  remove#(x,xs)                    
          
                           remove#(x,l) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  remove#1#(l,x)                   
          
                  remove#1#(dd(y,ys),x) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  eq#(x,y)                         
          
                  remove#1#(dd(y,ys),x) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  remove#2#(eq(x,y),x,y,ys)        
          
             remove#2#(#false(),x,y,ys) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  remove#(x,ys)                    
          
              remove#2#(#true(),x,y,ys) =  [1] x + [0]                      
                                        >= [1] x + [0]                      
                                        =  remove#(x,ys)                    
          
                #and(#false(),#false()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                 #and(#false(),#true()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                 #and(#true(),#false()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                  #and(#true(),#true()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                         #eq(#0(),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                      #eq(#0(),#neg(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                      #eq(#0(),#pos(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                        #eq(#0(),#s(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                      #eq(#neg(x),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                   #eq(#neg(x),#neg(y)) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
                   #eq(#neg(x),#pos(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                      #eq(#pos(x),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                   #eq(#pos(x),#neg(y)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                   #eq(#pos(x),#pos(y)) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
                        #eq(#s(x),#0()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                       #eq(#s(x),#s(y)) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
           #eq(dd(x'1,x'2),dd(y'1,y'2)) =  [0]                              
                                        >= [0]                              
                                        =  #and(#eq(x'1,y'1),#eq(x'2,y'2))  
          
                 #eq(dd(x'1,x'2),nil()) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                 #eq(nil(),dd(y'1,y'2)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                       #eq(nil(),nil()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                            #equal(x,y) =  [0]                              
                                        >= [0]                              
                                        =  #eq(x,y)                         
          
                               and(x,y) =  [1] x + [1] y + [0]              
                                        >= [1] x + [1] y + [0]              
                                        =  #and(x,y)                        
          
                              eq(l1,l2) =  [0]                              
                                        >= [0]                              
                                        =  eq#1(l1,l2)                      
          
                      eq#1(dd(x,xs),l2) =  [0]                              
                                        >= [0]                              
                                        =  eq#3(l2,x,xs)                    
          
                         eq#1(nil(),l2) =  [0]                              
                                        >= [0]                              
                                        =  eq#2(l2)                         
          
                         eq#2(dd(y,ys)) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                            eq#2(nil()) =  [0]                              
                                        >= [0]                              
                                        =  #true()                          
          
                    eq#3(dd(y,ys),x,xs) =  [0]                              
                                        >= [0]                              
                                        =  and(#equal(x,y),eq(xs,ys))       
          
                       eq#3(nil(),x,xs) =  [0]                              
                                        >= [0]                              
                                        =  #false()                         
          
                            remove(x,l) =  [1] l + [0]                      
                                        >= [1] l + [0]                      
                                        =  remove#1(l,x)                    
          
                   remove#1(dd(y,ys),x) =  [1] y + [1] ys + [0]             
                                        >= [1] y + [1] ys + [0]             
                                        =  remove#2(eq(x,y),x,y,ys)         
          
                      remove#1(nil(),x) =  [0]                              
                                        >= [0]                              
                                        =  nil()                            
          
              remove#2(#false(),x,y,ys) =  [1] y + [1] ys + [0]             
                                        >= [1] y + [1] ys + [0]             
                                        =  dd(y,remove(x,ys))               
          
               remove#2(#true(),x,y,ys) =  [1] y + [1] ys + [0]             
                                        >= [1] ys + [0]                     
                                        =  remove(x,ys)                     
          
        Further, it can be verified that all rules not oriented are covered by the weightgap condition.
**** Step 7.b:1.b:1.b:6: EmptyProcessor WORST_CASE(?,O(1))
    + Considered Problem:
        - Weak DPs:
            #eq#(#neg(x),#neg(y)) -> c_10(#eq#(x,y))
            #eq#(#pos(x),#pos(y)) -> c_14(#eq#(x,y))
            #eq#(#s(x),#s(y)) -> c_16(#eq#(x,y))
            #eq#(dd(x'1,x'2),dd(y'1,y'2)) -> c_17(#eq#(x'1,y'1),#eq#(x'2,y'2))
            #equal#(x,y) -> c_21(#eq#(x,y))
            eq#(l1,l2) -> eq#1#(l1,l2)
            eq#1#(dd(x,xs),l2) -> eq#3#(l2,x,xs)
            eq#3#(dd(y,ys),x,xs) -> #equal#(x,y)
            eq#3#(dd(y,ys),x,xs) -> eq#(xs,ys)
            nub#(l) -> nub#1#(l)
            nub#1#(dd(x,xs)) -> nub#(remove(x,xs))
            nub#1#(dd(x,xs)) -> remove#(x,xs)
            remove#(x,l) -> remove#1#(l,x)
            remove#1#(dd(y,ys),x) -> eq#(x,y)
            remove#1#(dd(y,ys),x) -> remove#2#(eq(x,y),x,y,ys)
            remove#2#(#false(),x,y,ys) -> remove#(x,ys)
            remove#2#(#true(),x,y,ys) -> remove#(x,ys)
        - Weak TRS:
            #and(#false(),#false()) -> #false()
            #and(#false(),#true()) -> #false()
            #and(#true(),#false()) -> #false()
            #and(#true(),#true()) -> #true()
            #eq(#0(),#0()) -> #true()
            #eq(#0(),#neg(y)) -> #false()
            #eq(#0(),#pos(y)) -> #false()
            #eq(#0(),#s(y)) -> #false()
            #eq(#neg(x),#0()) -> #false()
            #eq(#neg(x),#neg(y)) -> #eq(x,y)
            #eq(#neg(x),#pos(y)) -> #false()
            #eq(#pos(x),#0()) -> #false()
            #eq(#pos(x),#neg(y)) -> #false()
            #eq(#pos(x),#pos(y)) -> #eq(x,y)
            #eq(#s(x),#0()) -> #false()
            #eq(#s(x),#s(y)) -> #eq(x,y)
            #eq(dd(x'1,x'2),dd(y'1,y'2)) -> #and(#eq(x'1,y'1),#eq(x'2,y'2))
            #eq(dd(x'1,x'2),nil()) -> #false()
            #eq(nil(),dd(y'1,y'2)) -> #false()
            #eq(nil(),nil()) -> #true()
            #equal(x,y) -> #eq(x,y)
            and(x,y) -> #and(x,y)
            eq(l1,l2) -> eq#1(l1,l2)
            eq#1(dd(x,xs),l2) -> eq#3(l2,x,xs)
            eq#1(nil(),l2) -> eq#2(l2)
            eq#2(dd(y,ys)) -> #false()
            eq#2(nil()) -> #true()
            eq#3(dd(y,ys),x,xs) -> and(#equal(x,y),eq(xs,ys))
            eq#3(nil(),x,xs) -> #false()
            remove(x,l) -> remove#1(l,x)
            remove#1(dd(y,ys),x) -> remove#2(eq(x,y),x,y,ys)
            remove#1(nil(),x) -> nil()
            remove#2(#false(),x,y,ys) -> dd(y,remove(x,ys))
            remove#2(#true(),x,y,ys) -> remove(x,ys)
        - Signature:
            {#and/2,#eq/2,#equal/2,and/2,eq/2,eq#1/2,eq#2/1,eq#3/3,nub/1,nub#1/1,remove/2,remove#1/2,remove#2/4,#and#/2
            ,#eq#/2,#equal#/2,and#/2,eq#/2,eq#1#/2,eq#2#/1,eq#3#/3,nub#/1,nub#1#/1,remove#/2,remove#1#/2
            ,remove#2#/4} / {#0/0,#false/0,#neg/1,#pos/1,#s/1,#true/0,dd/2,nil/0,c_1/0,c_2/0,c_3/0,c_4/0,c_5/0,c_6/0
            ,c_7/0,c_8/0,c_9/0,c_10/1,c_11/0,c_12/0,c_13/0,c_14/1,c_15/0,c_16/1,c_17/2,c_18/0,c_19/0,c_20/0,c_21/1
            ,c_22/1,c_23/1,c_24/1,c_25/1,c_26/0,c_27/0,c_28/2,c_29/0,c_30/1,c_31/2,c_32/0,c_33/1,c_34/2,c_35/0,c_36/1
            ,c_37/1}
        - Obligation:
            innermost runtime complexity wrt. defined symbols {#and#,#eq#,#equal#,and#,eq#,eq#1#,eq#2#,eq#3#,nub#,nub#1#
            ,remove#,remove#1#,remove#2#} and constructors {#0,#false,#neg,#pos,#s,#true,dd,nil}
    + Applied Processor:
        EmptyProcessor
    + Details:
        The problem is already closed. The intended complexity is O(1).

WORST_CASE(?,O(n^4))
