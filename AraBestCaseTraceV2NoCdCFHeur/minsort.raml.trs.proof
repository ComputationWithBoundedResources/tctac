BEST_CASE(Omega(n^2),?)

Solution:
---------

  "#0" :: [] -(0)-> "b"(0, 0)
  "#EQ" :: [] -(0)-> "d"(0, 0)
  "#EQ" :: [] -(1)-> "d"(0, 0)
  "#GT" :: [] -(0)-> "d"(0, 0)
  "#GT" :: [] -(1)-> "d"(0, 0)
  "#LT" :: [] -(0)-> "d"(0, 0)
  "#LT" :: [] -(1)-> "d"(0, 0)
  "#cklt" :: ["d"(0, 0)] -(0)-> "a"(0, 0)
  "#compare" :: ["b"(0, 0) x "b"(0, 0)] -(1)-> "d"(0, 0)
  "#false" :: [] -(0)-> "a"(0, 0)
  "#false" :: [] -(1)-> "a"(0, 0)
  "#less" :: ["b"(0, 0) x "b"(0, 0)] -(1)-> "a"(0, 0)
  "#neg" :: ["b"(0, 0)] -(0)-> "b"(0, 0)
  "#pos" :: ["b"(0, 0)] -(0)-> "b"(0, 0)
  "#s" :: ["b"(0, 0)] -(0)-> "b"(0, 0)
  "#true" :: [] -(0)-> "a"(0, 0)
  "#true" :: [] -(1)-> "a"(0, 0)
  "dd" :: ["b"(0, 0) x "c"(2, 1)] -(1)-> "c"(1, 1)
  "dd" :: ["b"(0, 0) x "c"(1, 1)] -(0)-> "c"(0, 1)
  "dd" :: ["b"(0, 0) x "c"(0, 0)] -(0)-> "c"(0, 0)
  "findMin" :: ["c"(1, 1)] -(1)-> "c"(0, 1)
  "findMin#1" :: ["c"(1, 1)] -(0)-> "c"(0, 1)
  "findMin#2" :: ["c"(1, 1) x "b"(0, 0)] -(0)-> "c"(0, 1)
  "findMin#3" :: ["a"(0, 0) x "b"(0, 0) x "b"(0, 0) x "c"(2, 1)] -(0)-> "c"(0, 1)
  "minSort" :: ["c"(1, 1)] -(1)-> "c"(0, 0)
  "minSort#1" :: ["c"(0, 1)] -(1)-> "c"(0, 0)
  "nil" :: [] -(0)-> "c"(1, 1)
  "nil" :: [] -(0)-> "c"(0, 1)
  "nil" :: [] -(1)-> "c"(1, 1)
  "nil" :: [] -(0)-> "c"(0, 0)


Cost Free Signatures:
---------------------

  "#0" :: [] -(0)-> "b"_cf(0, 0)
  "#EQ" :: [] -(0)-> "d"_cf(0, 0)
  "#GT" :: [] -(0)-> "d"_cf(0, 0)
  "#LT" :: [] -(0)-> "d"_cf(0, 0)
  "#cklt" :: ["d"_cf(0, 0)] -(0)-> "a"_cf(0, 0)
  "#compare" :: ["b"_cf(0, 0) x "b"_cf(0, 0)] -(0)-> "d"_cf(0, 0)
  "#false" :: [] -(0)-> "a"_cf(0, 0)
  "#less" :: ["b"_cf(0, 0) x "b"_cf(0, 0)] -(0)-> "a"_cf(0, 0)
  "#neg" :: ["b"_cf(0, 0)] -(0)-> "b"_cf(0, 0)
  "#pos" :: ["b"_cf(0, 0)] -(0)-> "b"_cf(0, 0)
  "#s" :: ["b"_cf(0, 0)] -(0)-> "b"_cf(0, 0)
  "#true" :: [] -(0)-> "a"_cf(0, 0)
  "dd" :: ["b"_cf(0, 0) x "c"_cf(0, 0)] -(0)-> "c"_cf(0, 0)
  "dd" :: ["b"_cf(0, 0) x "c"_cf(1, 0)] -(1)-> "c"_cf(1, 0)
  "findMin" :: ["c"_cf(0, 0)] -(0)-> "c"_cf(0, 0)
  "findMin" :: ["c"_cf(1, 0)] -(0)-> "c"_cf(1, 0)
  "findMin#1" :: ["c"_cf(0, 0)] -(0)-> "c"_cf(0, 0)
  "findMin#1" :: ["c"_cf(1, 0)] -(0)-> "c"_cf(1, 0)
  "findMin#2" :: ["c"_cf(0, 0) x "b"_cf(0, 0)] -(0)-> "c"_cf(0, 0)
  "findMin#2" :: ["c"_cf(1, 0) x "b"_cf(0, 0)] -(1)-> "c"_cf(1, 0)
  "findMin#3" :: ["a"_cf(0, 0) x "b"_cf(0, 0) x "b"_cf(0, 0) x "c"_cf(0, 0)] -(0)-> "c"_cf(0, 0)
  "findMin#3" :: ["a"_cf(0, 0) x "b"_cf(0, 0) x "b"_cf(0, 0) x "c"_cf(1, 0)] -(2)-> "c"_cf(1, 0)
  "minSort" :: ["c"_cf(0, 0)] -(0)-> "c"_cf(0, 0)
  "minSort#1" :: ["c"_cf(0, 0)] -(0)-> "c"_cf(0, 0)
  "nil" :: [] -(0)-> "c"_cf(0, 0)
  "nil" :: [] -(0)-> "c"_cf(1, 0)
