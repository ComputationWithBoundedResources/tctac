BEST_CASE(Omega(n^1),?)

Solution:
---------

  "0" :: [] -(0)-> "d"(0)
  "and" :: ["c"(0) x "c"(14)] -(1)-> "c"(3)
  "dd" :: ["d"(0) x "d"(1)] -(1)-> "d"(1)
  "dd" :: ["d"(0) x "d"(2)] -(2)-> "d"(2)
  "dd" :: ["d"(0) x "d"(0)] -(0)-> "d"(0)
  "dd" :: ["d"(0) x "d"(3)] -(3)-> "d"(3)
  "edge" :: ["d"(0) x "d"(0) x "d"(0)] -(0)-> "d"(0)
  "elem" :: ["d"(0) x "d"(1)] -(1)-> "c"(0)
  "eq" :: ["d"(0) x "d"(0)] -(1)-> "c"(4)
  "false" :: [] -(0)-> "c"(8)
  "false" :: [] -(0)-> "c"(6)
  "false" :: [] -(0)-> "c"(0)
  "false" :: [] -(0)-> "c"(14)
  "false" :: [] -(0)-> "c"(5)
  "false" :: [] -(0)-> "c"(15)
  "false" :: [] -(0)-> "c"(4)
  "false" :: [] -(0)-> "c"(3)
  "false" :: [] -(0)-> "c"(2)
  "forrest" :: ["a"(1)] -(0)-> "b"(0)
  "graph" :: ["d"(0) x "d"(2)] -(1)-> "a"(1)
  "inBlock" :: ["d"(0) x "d"(2)] -(1)-> "c"(4)
  "insert" :: ["d"(0) x "d"(1)] -(2)-> "d"(1)
  "insert#q" :: ["c"(6) x "d"(0) x "d"(0) x "d"(1)] -(1)-> "d"(1)
  "join" :: ["d"(0) x "d"(1) x "d"(0)] -(1)-> "d"(0)
  "join#q" :: ["c"(8) x "d"(0) x "d"(0) x "d"(1) x "d"(0)] -(1)-> "d"(0)
  "kruskal" :: ["d"(3) x "d"(0) x "d"(0)] -(1)-> "b"(0)
  "kruskal#q" :: ["c"(4) x "d"(0) x "d"(3) x "d"(0) x "d"(0)] -(2)-> "b"(0)
  "leq" :: ["d"(0) x "d"(0)] -(1)-> "c"(6)
  "nil" :: [] -(0)-> "d"(1)
  "nil" :: [] -(0)-> "d"(2)
  "nil" :: [] -(0)-> "d"(0)
  "nil" :: [] -(0)-> "d"(3)
  "or" :: ["c"(5) x "c"(15)] -(1)-> "c"(0)
  "pair" :: ["d"(0) x "d"(0)] -(0)-> "b"(0)
  "partitions" :: ["d"(1)] -(1)-> "d"(0)
  "pp" :: ["d"(0) x "d"(0)] -(1)-> "d"(0)
  "s" :: ["d"(0)] -(0)-> "d"(0)
  "sort" :: ["d"(3)] -(1)-> "d"(1)
  "src" :: ["d"(0)] -(1)-> "d"(0)
  "trg" :: ["d"(0)] -(1)-> "d"(0)
  "true" :: [] -(0)-> "c"(8)
  "true" :: [] -(0)-> "c"(6)
  "true" :: [] -(0)-> "c"(0)
  "true" :: [] -(0)-> "c"(14)
  "true" :: [] -(0)-> "c"(5)
  "true" :: [] -(0)-> "c"(15)
  "true" :: [] -(0)-> "c"(4)
  "true" :: [] -(0)-> "c"(2)
  "true" :: [] -(0)-> "c"(3)
  "wt" :: ["d"(0)] -(1)-> "d"(0)


Cost Free Signatures:
---------------------

  "0" :: [] -(0)-> "d"_cf(0)
  "and" :: ["c"_cf(0) x "c"_cf(0)] -(0)-> "c"_cf(0)
  "dd" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "d"_cf(0)
  "edge" :: ["d"_cf(0) x "d"_cf(0) x "d"_cf(0)] -(0)-> "d"_cf(0)
  "elem" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "c"_cf(0)
  "eq" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "c"_cf(0)
  "false" :: [] -(0)-> "c"_cf(0)
  "inBlock" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "c"_cf(0)
  "insert" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "d"_cf(0)
  "insert#q" :: ["c"_cf(0) x "d"_cf(0) x "d"_cf(0) x "d"_cf(0)] -(0)-> "d"_cf(0)
  "join" :: ["d"_cf(0) x "d"_cf(0) x "d"_cf(0)] -(0)-> "d"_cf(0)
  "join#q" :: ["c"_cf(0) x "d"_cf(0) x "d"_cf(0) x "d"_cf(0) x "d"_cf(0)] -(0)-> "d"_cf(0)
  "kruskal" :: ["d"_cf(0) x "d"_cf(0) x "d"_cf(0)] -(0)-> "b"_cf(0)
  "kruskal#q" :: ["c"_cf(0) x "d"_cf(0) x "d"_cf(0) x "d"_cf(0) x "d"_cf(0)] -(0)-> "b"_cf(0)
  "leq" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "c"_cf(0)
  "nil" :: [] -(0)-> "d"_cf(0)
  "or" :: ["c"_cf(0) x "c"_cf(0)] -(0)-> "c"_cf(0)
  "pair" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "b"_cf(0)
  "partitions" :: ["d"_cf(0)] -(0)-> "d"_cf(0)
  "pp" :: ["d"_cf(0) x "d"_cf(0)] -(0)-> "d"_cf(0)
  "s" :: ["d"_cf(0)] -(0)-> "d"_cf(0)
  "sort" :: ["d"_cf(0)] -(0)-> "d"_cf(0)
  "src" :: ["d"_cf(0)] -(0)-> "d"_cf(0)
  "trg" :: ["d"_cf(0)] -(0)-> "d"_cf(0)
  "true" :: [] -(0)-> "c"_cf(0)
  "wt" :: ["d"_cf(0)] -(0)-> "d"_cf(0)


Base Constructors:
------------------
  "\"0\"_d" :: [] -(0)-> "d"(1)
  "\"dd\"_d" :: ["d"(0) x "d"(1)] -(1)-> "d"(1)
  "\"edge\"_d" :: ["d"(0) x "d"(0) x "d"(15)] -(1)-> "d"(1)
  "\"false\"_c" :: [] -(0)-> "c"(1)
  "\"graph\"_a" :: ["d"(0) x "d"(2)] -(1)-> "a"(1)
  "\"nil\"_d" :: [] -(0)-> "d"(1)
  "\"pair\"_b" :: ["d"(10) x "d"(0)] -(1)-> "b"(1)
  "\"s\"_d" :: ["d"(13)] -(1)-> "d"(1)
  "\"true\"_c" :: [] -(0)-> "c"(1)

